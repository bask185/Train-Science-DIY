
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775/LoPiTS-XS.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000200 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
     200:	3e c0       	rjmp	.+124    	; 0x27e <__ctors_end>
     202:	00 00       	nop
../../../../crt1/gcrt1.S:67
     204:	63 c0       	rjmp	.+198    	; 0x2cc <__bad_interrupt>
     206:	00 00       	nop
../../../../crt1/gcrt1.S:68
     208:	61 c0       	rjmp	.+194    	; 0x2cc <__bad_interrupt>
     20a:	00 00       	nop
../../../../crt1/gcrt1.S:69
     20c:	13 c5       	rjmp	.+2598   	; 0xc34 <__vector_3>
     20e:	00 00       	nop
../../../../crt1/gcrt1.S:70
     210:	0e c5       	rjmp	.+2588   	; 0xc2e <__vector_4>
     212:	00 00       	nop
../../../../crt1/gcrt1.S:71
     214:	09 c5       	rjmp	.+2578   	; 0xc28 <__vector_5>
     216:	00 00       	nop
../../../../crt1/gcrt1.S:72
     218:	59 c0       	rjmp	.+178    	; 0x2cc <__bad_interrupt>
     21a:	00 00       	nop
../../../../crt1/gcrt1.S:73
     21c:	57 c0       	rjmp	.+174    	; 0x2cc <__bad_interrupt>
     21e:	00 00       	nop
../../../../crt1/gcrt1.S:74
     220:	55 c0       	rjmp	.+170    	; 0x2cc <__bad_interrupt>
     222:	00 00       	nop
../../../../crt1/gcrt1.S:75
     224:	53 c0       	rjmp	.+166    	; 0x2cc <__bad_interrupt>
     226:	00 00       	nop
../../../../crt1/gcrt1.S:76
     228:	51 c0       	rjmp	.+162    	; 0x2cc <__bad_interrupt>
     22a:	00 00       	nop
../../../../crt1/gcrt1.S:77
     22c:	4f c0       	rjmp	.+158    	; 0x2cc <__bad_interrupt>
     22e:	00 00       	nop
../../../../crt1/gcrt1.S:78
     230:	4d c0       	rjmp	.+154    	; 0x2cc <__bad_interrupt>
     232:	00 00       	nop
../../../../crt1/gcrt1.S:79
     234:	4b c0       	rjmp	.+150    	; 0x2cc <__bad_interrupt>
     236:	00 00       	nop
../../../../crt1/gcrt1.S:80
     238:	49 c0       	rjmp	.+146    	; 0x2cc <__bad_interrupt>
     23a:	00 00       	nop
../../../../crt1/gcrt1.S:81
     23c:	bb c4       	rjmp	.+2422   	; 0xbb4 <__vector_15>
     23e:	00 00       	nop
../../../../crt1/gcrt1.S:82
     240:	45 c0       	rjmp	.+138    	; 0x2cc <__bad_interrupt>
     242:	00 00       	nop
../../../../crt1/gcrt1.S:83
     244:	43 c0       	rjmp	.+134    	; 0x2cc <__bad_interrupt>
     246:	00 00       	nop
../../../../crt1/gcrt1.S:84
     248:	41 c0       	rjmp	.+130    	; 0x2cc <__bad_interrupt>
     24a:	00 00       	nop
../../../../crt1/gcrt1.S:85
     24c:	3f c0       	rjmp	.+126    	; 0x2cc <__bad_interrupt>
     24e:	00 00       	nop
../../../../crt1/gcrt1.S:86
     250:	3d c0       	rjmp	.+122    	; 0x2cc <__bad_interrupt>
     252:	00 00       	nop
../../../../crt1/gcrt1.S:87
     254:	3b c0       	rjmp	.+118    	; 0x2cc <__bad_interrupt>
     256:	00 00       	nop
../../../../crt1/gcrt1.S:88
     258:	39 c0       	rjmp	.+114    	; 0x2cc <__bad_interrupt>
     25a:	00 00       	nop
../../../../crt1/gcrt1.S:89
     25c:	37 c0       	rjmp	.+110    	; 0x2cc <__bad_interrupt>
     25e:	00 00       	nop
../../../../crt1/gcrt1.S:90
     260:	35 c0       	rjmp	.+106    	; 0x2cc <__bad_interrupt>
     262:	00 00       	nop
../../../../crt1/gcrt1.S:91
     264:	33 c0       	rjmp	.+102    	; 0x2cc <__bad_interrupt>
     266:	00 00       	nop
../../../../crt1/gcrt1.S:92
     268:	31 c0       	rjmp	.+98     	; 0x2cc <__bad_interrupt>
     26a:	00 00       	nop
../../../../crt1/gcrt1.S:93
     26c:	2f c0       	rjmp	.+94     	; 0x2cc <__bad_interrupt>
     26e:	00 00       	nop
../../../../crt1/gcrt1.S:94
     270:	2d c0       	rjmp	.+90     	; 0x2cc <__bad_interrupt>
     272:	00 00       	nop
../../../../crt1/gcrt1.S:95
     274:	2b c0       	rjmp	.+86     	; 0x2cc <__bad_interrupt>
     276:	00 00       	nop
../../../../crt1/gcrt1.S:96
     278:	29 c0       	rjmp	.+82     	; 0x2cc <__bad_interrupt>
	...

0000027c <__ctors_start>:
__trampolines_start():
     27c:	d7 09       	sbc	r29, r7

0000027e <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     27e:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     280:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     282:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     284:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     286:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
     288:	de bf       	out	0x3e, r29	; 62

0000028a <_initThreeStuff()>:
__do_copy_data():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     28a:	18 e3       	ldi	r17, 0x38	; 56
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     28c:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     28e:	b8 e3       	ldi	r27, 0x38	; 56
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     290:	ea ea       	ldi	r30, 0xAA	; 170
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     292:	f4 e1       	ldi	r31, 0x14	; 20
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     294:	02 c0       	rjmp	.+4      	; 0x29a <_initThreeStuff()+0x10>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     296:	05 90       	lpm	r0, Z+
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     298:	0d 92       	st	X+, r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     29a:	a6 30       	cpi	r26, 0x06	; 6
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     29c:	b1 07       	cpc	r27, r17
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     29e:	d9 f7       	brne	.-10     	; 0x296 <_initThreeStuff()+0xc>

000002a0 <__do_clear_bss>:
__do_clear_bss():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     2a0:	28 e3       	ldi	r18, 0x38	; 56
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     2a2:	a6 e0       	ldi	r26, 0x06	; 6
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     2a4:	b8 e3       	ldi	r27, 0x38	; 56
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     2a6:	01 c0       	rjmp	.+2      	; 0x2aa <.do_clear_bss_start>

000002a8 <.do_clear_bss_loop>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     2a8:	1d 92       	st	X+, r1

000002aa <.do_clear_bss_start>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     2aa:	a8 38       	cpi	r26, 0x88	; 136
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     2ac:	b2 07       	cpc	r27, r18
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     2ae:	e1 f7       	brne	.-8      	; 0x2a8 <.do_clear_bss_loop>

000002b0 <__do_global_ctors>:
__do_global_ctors():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     2b0:	11 e0       	ldi	r17, 0x01	; 1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     2b2:	cf e3       	ldi	r28, 0x3F	; 63
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     2b4:	d1 e0       	ldi	r29, 0x01	; 1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <__do_global_ctors+0x10>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     2b8:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     2ba:	fe 01       	movw	r30, r28
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     2bc:	0e 94 16 0a 	call	0x142c	; 0x142c <__tablejump2__>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     2c0:	ce 33       	cpi	r28, 0x3E	; 62
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     2c2:	d1 07       	cpc	r29, r17
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     2c4:	c9 f7       	brne	.-14     	; 0x2b8 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     2c6:	00 d5       	rcall	.+2560   	; 0xcc8 <main>
../../../../crt1/gcrt1.S:315
     2c8:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <_exit>

000002cc <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
     2cc:	99 cf       	rjmp	.-206    	; 0x200 <__vectors>

000002ce <attachInterrupt.constprop.10>:
attachInterrupt.constprop.10():
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/main.cpp:197
  // Finally, none of these three things need to be done if running optiboot!
  // We want the vectors in the alt location, it checks, clears, and stashes the reset flags (in GPR0)
  // and it providews the entrypoint we call to write to flash.
#else
  void _initThreeStuff() __attribute__ ((naked)) __attribute__((used)) __attribute__ ((section (".init3")));
  void _initThreeStuff() {
     2ce:	82 31       	cpi	r24, 0x12	; 18
     2d0:	08 f0       	brcs	.+2      	; 0x2d4 <attachInterrupt.constprop.10+0x6>
     2d2:	42 c0       	rjmp	.+132    	; 0x358 <attachInterrupt.constprop.10+0x8a>
     2d4:	28 2f       	mov	r18, r24
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	f9 01       	movw	r30, r18
     2da:	e8 56       	subi	r30, 0x68	; 104
     2dc:	fb 46       	sbci	r31, 0x6B	; 107
     2de:	90 81       	ld	r25, Z
     2e0:	9f 3f       	cpi	r25, 0xFF	; 255
     2e2:	d1 f1       	breq	.+116    	; 0x358 <attachInterrupt.constprop.10+0x8a>
     2e4:	62 30       	cpi	r22, 0x02	; 2
     2e6:	59 f0       	breq	.+22     	; 0x2fe <attachInterrupt.constprop.10+0x30>
     2e8:	20 f4       	brcc	.+8      	; 0x2f2 <attachInterrupt.constprop.10+0x24>
     2ea:	45 e0       	ldi	r20, 0x05	; 5
     2ec:	66 23       	and	r22, r22
     2ee:	41 f0       	breq	.+16     	; 0x300 <attachInterrupt.constprop.10+0x32>
     2f0:	08 95       	ret
     2f2:	63 30       	cpi	r22, 0x03	; 3
     2f4:	91 f1       	breq	.+100    	; 0x35a <attachInterrupt.constprop.10+0x8c>
     2f6:	41 e0       	ldi	r20, 0x01	; 1
     2f8:	64 30       	cpi	r22, 0x04	; 4
     2fa:	11 f0       	breq	.+4      	; 0x300 <attachInterrupt.constprop.10+0x32>
     2fc:	08 95       	ret
     2fe:	43 e0       	ldi	r20, 0x03	; 3
     300:	2a 57       	subi	r18, 0x7A	; 122
     302:	3b 46       	sbci	r19, 0x6B	; 107
     304:	d9 01       	movw	r26, r18
     306:	ec 91       	ld	r30, X
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	df 01       	movw	r26, r30
     30c:	aa 0f       	add	r26, r26
     30e:	bb 1f       	adc	r27, r27
     310:	a0 50       	subi	r26, 0x00	; 0
     312:	b8 4c       	sbci	r27, 0xC8	; 200
     314:	2d 91       	ld	r18, X+
     316:	3c 91       	ld	r19, X
     318:	21 15       	cp	r18, r1
     31a:	31 05       	cpc	r19, r1
     31c:	e9 f0       	breq	.+58     	; 0x358 <attachInterrupt.constprop.10+0x8a>
     31e:	69 2f       	mov	r22, r25
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	66 0f       	add	r22, r22
     324:	77 1f       	adc	r23, r23
     326:	26 0f       	add	r18, r22
     328:	37 1f       	adc	r19, r23
     32a:	62 ef       	ldi	r22, 0xF2	; 242
     32c:	71 e0       	ldi	r23, 0x01	; 1
     32e:	d9 01       	movw	r26, r18
     330:	6d 93       	st	X+, r22
     332:	7c 93       	st	X, r23
     334:	5f b7       	in	r21, 0x3f	; 63
     336:	f8 94       	cli
     338:	9f 01       	movw	r18, r30
     33a:	65 e0       	ldi	r22, 0x05	; 5
     33c:	22 0f       	add	r18, r18
     33e:	33 1f       	adc	r19, r19
     340:	6a 95       	dec	r22
     342:	e1 f7       	brne	.-8      	; 0x33c <attachInterrupt.constprop.10+0x6e>
     344:	e0 e1       	ldi	r30, 0x10	; 16
     346:	e9 0f       	add	r30, r25
     348:	e2 0f       	add	r30, r18
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	fc 5f       	subi	r31, 0xFC	; 252
     34e:	80 81       	ld	r24, Z
     350:	88 7f       	andi	r24, 0xF8	; 248
     352:	84 2b       	or	r24, r20
     354:	80 83       	st	Z, r24
     356:	5f bf       	out	0x3f, r21	; 63
     358:	08 95       	ret
     35a:	42 e0       	ldi	r20, 0x02	; 2
     35c:	d1 cf       	rjmp	.-94     	; 0x300 <attachInterrupt.constprop.10+0x32>

0000035e <ackCV()>:
_Z5ackCVv():
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	89 2b       	or	r24, r25
     364:	11 f0       	breq	.+4      	; 0x36a <ackCV()+0xc>
     366:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
     36a:	08 95       	ret

0000036c <micros>:
micros():
     36c:	9f b7       	in	r25, 0x3f	; 63
     36e:	f8 94       	cli
     370:	88 e0       	ldi	r24, 0x08	; 8
     372:	80 93 84 0a 	sts	0x0A84, r24	; 0x800a84 <digital_pin_to_bit_position+0x7f75ec>
     376:	80 91 8e 0a 	lds	r24, 0x0A8E	; 0x800a8e <digital_pin_to_bit_position+0x7f75f6>
     37a:	81 ff       	sbrs	r24, 1
     37c:	fc cf       	rjmp	.-8      	; 0x376 <micros+0xa>
     37e:	80 91 8d 0a 	lds	r24, 0x0A8D	; 0x800a8d <digital_pin_to_bit_position+0x7f75f5>
     382:	e0 91 a2 0a 	lds	r30, 0x0AA2	; 0x800aa2 <digital_pin_to_bit_position+0x7f760a>
     386:	f0 91 a3 0a 	lds	r31, 0x0AA3	; 0x800aa3 <digital_pin_to_bit_position+0x7f760b>
     38a:	20 91 3b 38 	lds	r18, 0x383B	; 0x80383b <timingStruct+0x6>
     38e:	30 91 3c 38 	lds	r19, 0x383C	; 0x80383c <timingStruct+0x7>
     392:	40 91 3d 38 	lds	r20, 0x383D	; 0x80383d <timingStruct+0x8>
     396:	50 91 3e 38 	lds	r21, 0x383E	; 0x80383e <timingStruct+0x9>
     39a:	9f bf       	out	0x3f, r25	; 63
     39c:	80 ff       	sbrs	r24, 0
     39e:	07 c0       	rjmp	.+14     	; 0x3ae <micros+0x42>
     3a0:	e7 30       	cpi	r30, 0x07	; 7
     3a2:	f1 05       	cpc	r31, r1
     3a4:	20 f4       	brcc	.+8      	; 0x3ae <micros+0x42>
     3a6:	2f 5f       	subi	r18, 0xFF	; 255
     3a8:	3f 4f       	sbci	r19, 0xFF	; 255
     3aa:	4f 4f       	sbci	r20, 0xFF	; 255
     3ac:	5f 4f       	sbci	r21, 0xFF	; 255
     3ae:	bf 01       	movw	r22, r30
     3b0:	76 95       	lsr	r23
     3b2:	67 95       	ror	r22
     3b4:	cf 01       	movw	r24, r30
     3b6:	86 0f       	add	r24, r22
     3b8:	91 1d       	adc	r25, r1
     3ba:	e6 2f       	mov	r30, r22
     3bc:	e6 95       	lsr	r30
     3be:	e6 95       	lsr	r30
     3c0:	76 2f       	mov	r23, r22
     3c2:	72 95       	swap	r23
     3c4:	7f 70       	andi	r23, 0x0F	; 15
     3c6:	e7 1b       	sub	r30, r23
     3c8:	ff 0b       	sbc	r31, r31
     3ca:	67 fd       	sbrc	r22, 7
     3cc:	31 96       	adiw	r30, 0x01	; 1
     3ce:	e8 0f       	add	r30, r24
     3d0:	f9 1f       	adc	r31, r25
     3d2:	a0 e3       	ldi	r26, 0x30	; 48
     3d4:	b3 e0       	ldi	r27, 0x03	; 3
     3d6:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__muluhisi3>
     3da:	6e 0f       	add	r22, r30
     3dc:	7f 1f       	adc	r23, r31
     3de:	81 1d       	adc	r24, r1
     3e0:	91 1d       	adc	r25, r1
     3e2:	08 95       	ret

000003e4 <ExternalInterruptHandler()>:
_Z24ExternalInterruptHandlerv():
     3e4:	ff 92       	push	r15
     3e6:	0f 93       	push	r16
     3e8:	1f 93       	push	r17
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	be df       	rcall	.-132    	; 0x36c <micros>
     3f0:	20 91 2d 38 	lds	r18, 0x382D	; 0x80382d <ExternalInterruptHandler()::lastMicros>
     3f4:	30 91 2e 38 	lds	r19, 0x382E	; 0x80382e <ExternalInterruptHandler()::lastMicros+0x1>
     3f8:	eb 01       	movw	r28, r22
     3fa:	c2 1b       	sub	r28, r18
     3fc:	d3 0b       	sbc	r29, r19
     3fe:	20 91 31 38 	lds	r18, 0x3831	; 0x803831 <bitMin>
     402:	30 91 32 38 	lds	r19, 0x3832	; 0x803832 <bitMin+0x1>
     406:	c2 17       	cp	r28, r18
     408:	d3 07       	cpc	r29, r19
     40a:	08 f4       	brcc	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40c:	5d c0       	rjmp	.+186    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     40e:	40 91 3f 38 	lds	r20, 0x383F	; 0x80383f <DccRx>
     412:	50 91 40 38 	lds	r21, 0x3840	; 0x803840 <DccRx+0x1>
     416:	41 30       	cpi	r20, 0x01	; 1
     418:	51 05       	cpc	r21, r1
     41a:	61 f0       	breq	.+24     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     41c:	e0 91 68 38 	lds	r30, 0x3868	; 0x803868 <DccProcState+0x13>
     420:	f0 91 69 38 	lds	r31, 0x3869	; 0x803869 <DccProcState+0x14>
     424:	20 81       	ld	r18, Z
     426:	30 91 6a 38 	lds	r19, 0x386A	; 0x80386a <DccProcState+0x15>
     42a:	23 23       	and	r18, r19
     42c:	30 91 2f 38 	lds	r19, 0x382F	; 0x80382f <ISRLevel>
     430:	23 13       	cpse	r18, r19
     432:	4a c0       	rjmp	.+148    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     434:	60 93 2d 38 	sts	0x382D, r22	; 0x80382d <ExternalInterruptHandler()::lastMicros>
     438:	70 93 2e 38 	sts	0x382E, r23	; 0x80382e <ExternalInterruptHandler()::lastMicros+0x1>
     43c:	00 91 33 38 	lds	r16, 0x3833	; 0x803833 <bitMax>
     440:	10 91 34 38 	lds	r17, 0x3834	; 0x803834 <bitMax+0x1>
     444:	42 30       	cpi	r20, 0x02	; 2
     446:	51 05       	cpc	r21, r1
     448:	09 f4       	brne	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     44a:	0d c1       	rjmp	.+538    	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     44c:	43 30       	cpi	r20, 0x03	; 3
     44e:	51 05       	cpc	r21, r1
     450:	09 f4       	brne	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     452:	48 c1       	rjmp	.+656    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
     454:	41 30       	cpi	r20, 0x01	; 1
     456:	51 05       	cpc	r21, r1
     458:	61 f4       	brne	.+24     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     45a:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <ExternalInterruptHandler()::halfBit>
     45e:	81 30       	cpi	r24, 0x01	; 1
     460:	09 f4       	brne	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     462:	45 c0       	rjmp	.+138    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     464:	b8 f1       	brcs	.+110    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     466:	83 30       	cpi	r24, 0x03	; 3
     468:	09 f4       	brne	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     46a:	7e c0       	rjmp	.+252    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
     46c:	84 30       	cpi	r24, 0x04	; 4
     46e:	09 f4       	brne	.+2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     470:	c3 c0       	rjmp	.+390    	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
     472:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <DccRx>
     476:	90 91 40 38 	lds	r25, 0x3840	; 0x803840 <DccRx+0x1>
     47a:	01 97       	sbiw	r24, 0x01	; 1
     47c:	29 f1       	breq	.+74     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     47e:	c0 17       	cp	r28, r16
     480:	d1 07       	cpc	r29, r17
     482:	08 f0       	brcs	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     484:	67 c1       	rjmp	.+718    	; 0x754 <__LOCK_REGION_LENGTH__+0x354>
     486:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <ExternalInterruptHandler()::preambleBitCount>
     48a:	8f 5f       	subi	r24, 0xFF	; 255
     48c:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <ExternalInterruptHandler()::preambleBitCount>
     490:	8b 30       	cpi	r24, 0x0B	; 11
     492:	d0 f0       	brcs	.+52     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <DccRx>
     49c:	90 93 40 38 	sts	0x3840, r25	; 0x803840 <DccRx+0x1>
     4a0:	64 e0       	ldi	r22, 0x04	; 4
     4a2:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <DccProcState+0x11>
     4a6:	13 df       	rcall	.-474    	; 0x2ce <attachInterrupt.constprop.10>
     4a8:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <ISRLevel>
     4ac:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <ExternalInterruptHandler()::halfBit>
     4b0:	82 e5       	ldi	r24, 0x52	; 82
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <bitMax>
     4b8:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <bitMax+0x1>
     4bc:	83 e2       	ldi	r24, 0x23	; 35
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <bitMin>
     4c4:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <bitMin+0x1>
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	0f 91       	pop	r16
     4d0:	ff 90       	pop	r15
     4d2:	08 95       	ret
     4d4:	c0 17       	cp	r28, r16
     4d6:	d1 07       	cpc	r29, r17
     4d8:	30 f4       	brcc	.+12     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <ExternalInterruptHandler()::halfBit>
     4e0:	c0 93 2b 38 	sts	0x382B, r28	; 0x80382b <ExternalInterruptHandler()::bit1>
     4e4:	c6 cf       	rjmp	.-116    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     4e6:	84 e0       	ldi	r24, 0x04	; 4
     4e8:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <ExternalInterruptHandler()::halfBit>
     4ec:	c2 cf       	rjmp	.-124    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     4ee:	c0 17       	cp	r28, r16
     4f0:	d1 07       	cpc	r29, r17
     4f2:	c0 f5       	brcc	.+112    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     4f4:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <ExternalInterruptHandler()::halfBit>
     4f8:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <ExternalInterruptHandler()::preambleBitCount>
     4fc:	8f 5f       	subi	r24, 0xFF	; 255
     4fe:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <ExternalInterruptHandler()::preambleBitCount>
     502:	20 91 2b 38 	lds	r18, 0x382B	; 0x80382b <ExternalInterruptHandler()::bit1>
     506:	8c 2f       	mov	r24, r28
     508:	0c 2e       	mov	r0, r28
     50a:	00 0c       	add	r0, r0
     50c:	99 0b       	sbc	r25, r25
     50e:	82 1b       	sub	r24, r18
     510:	91 09       	sbc	r25, r1
     512:	27 fd       	sbrc	r18, 7
     514:	93 95       	inc	r25
     516:	97 ff       	sbrs	r25, 7
     518:	03 c0       	rjmp	.+6      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     51a:	91 95       	neg	r25
     51c:	81 95       	neg	r24
     51e:	91 09       	sbc	r25, r1
     520:	49 97       	sbiw	r24, 0x19	; 25
     522:	94 f2       	brlt	.-92     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     524:	10 92 3f 38 	sts	0x383F, r1	; 0x80383f <DccRx>
     528:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <DccRx+0x1>
     52c:	82 e9       	ldi	r24, 0x92	; 146
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <bitMax>
     534:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <bitMax+0x1>
     538:	82 e5       	ldi	r24, 0x52	; 82
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <bitMin>
     540:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <bitMin+0x1>
     544:	10 92 2a 38 	sts	0x382A, r1	; 0x80382a <ExternalInterruptHandler()::preambleBitCount>
     548:	f0 90 30 38 	lds	r15, 0x3830	; 0x803830 <ISREdge>
     54c:	6f 2d       	mov	r22, r15
     54e:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <DccProcState+0x11>
     552:	bd de       	rcall	.-646    	; 0x2ce <attachInterrupt.constprop.10>
     554:	80 91 6a 38 	lds	r24, 0x386A	; 0x80386a <DccProcState+0x15>
     558:	93 e0       	ldi	r25, 0x03	; 3
     55a:	f9 12       	cpse	r15, r25
     55c:	25 c0       	rjmp	.+74     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
     55e:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <ISRLevel>
     562:	87 cf       	rjmp	.-242    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	c0 cf       	rjmp	.-128    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     568:	c0 17       	cp	r28, r16
     56a:	d1 07       	cpc	r29, r17
     56c:	f8 f4       	brcc	.+62     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
     56e:	10 92 3f 38 	sts	0x383F, r1	; 0x80383f <DccRx>
     572:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <DccRx+0x1>
     576:	82 e9       	ldi	r24, 0x92	; 146
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <bitMax>
     57e:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <bitMax+0x1>
     582:	82 e5       	ldi	r24, 0x52	; 82
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <bitMin>
     58a:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <bitMin+0x1>
     58e:	10 92 2a 38 	sts	0x382A, r1	; 0x80382a <ExternalInterruptHandler()::preambleBitCount>
     592:	f0 90 30 38 	lds	r15, 0x3830	; 0x803830 <ISREdge>
     596:	6f 2d       	mov	r22, r15
     598:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <DccProcState+0x11>
     59c:	98 de       	rcall	.-720    	; 0x2ce <attachInterrupt.constprop.10>
     59e:	80 91 6a 38 	lds	r24, 0x386A	; 0x80386a <DccProcState+0x15>
     5a2:	33 e0       	ldi	r19, 0x03	; 3
     5a4:	f3 16       	cp	r15, r19
     5a6:	d9 f2       	breq	.-74     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	d9 cf       	rjmp	.-78     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     5ac:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <ISREdge>
     5b0:	93 30       	cpi	r25, 0x03	; 3
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
     5b4:	82 e0       	ldi	r24, 0x02	; 2
     5b6:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <ISREdge>
     5ba:	82 e0       	ldi	r24, 0x02	; 2
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <DccRx>
     5c2:	90 93 40 38 	sts	0x3840, r25	; 0x803840 <DccRx+0x1>
     5c6:	82 e9       	ldi	r24, 0x92	; 146
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <bitMax>
     5ce:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <bitMax+0x1>
     5d2:	82 e5       	ldi	r24, 0x52	; 82
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <bitMin>
     5da:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <bitMin+0x1>
     5de:	10 92 45 38 	sts	0x3845, r1	; 0x803845 <DccRx+0x6>
     5e2:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <ExternalInterruptHandler()::preambleBitCount>
     5e6:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <DccRx+0x7>
     5ea:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <DccRx+0x3>
     5ee:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <DccRx+0x5>
     5f2:	10 92 43 38 	sts	0x3843, r1	; 0x803843 <DccRx+0x4>
     5f6:	cd cf       	rjmp	.-102    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
     5f8:	c0 17       	cp	r28, r16
     5fa:	d1 07       	cpc	r29, r17
     5fc:	a8 f4       	brcc	.+42     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
     5fe:	10 92 3f 38 	sts	0x383F, r1	; 0x80383f <DccRx>
     602:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <DccRx+0x1>
     606:	82 e9       	ldi	r24, 0x92	; 146
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <bitMax>
     60e:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <bitMax+0x1>
     612:	82 e5       	ldi	r24, 0x52	; 82
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <bitMin>
     61a:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <bitMin+0x1>
     61e:	10 92 2a 38 	sts	0x382A, r1	; 0x80382a <ExternalInterruptHandler()::preambleBitCount>
     622:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <DccRx+0x3>
     626:	90 cf       	rjmp	.-224    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <DccRx>
     630:	90 93 40 38 	sts	0x3840, r25	; 0x803840 <DccRx+0x1>
     634:	82 e9       	ldi	r24, 0x92	; 146
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <bitMax>
     63c:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <bitMax+0x1>
     640:	82 e5       	ldi	r24, 0x52	; 82
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <bitMin>
     648:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <bitMin+0x1>
     64c:	10 92 45 38 	sts	0x3845, r1	; 0x803845 <DccRx+0x6>
     650:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <ExternalInterruptHandler()::preambleBitCount>
     654:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <DccRx+0x7>
     658:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <DccRx+0x3>
     65c:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <DccRx+0x5>
     660:	10 92 43 38 	sts	0x3843, r1	; 0x803843 <DccRx+0x4>
     664:	71 cf       	rjmp	.-286    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     666:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <DccRx+0x3>
     66a:	9f 5f       	subi	r25, 0xFF	; 255
     66c:	90 93 42 38 	sts	0x3842, r25	; 0x803842 <DccRx+0x3>
     670:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <DccRx+0x4>
     674:	88 0f       	add	r24, r24
     676:	c0 17       	cp	r28, r16
     678:	d1 07       	cpc	r29, r17
     67a:	e0 f0       	brcs	.+56     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
     67c:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <DccRx+0x4>
     680:	98 30       	cpi	r25, 0x08	; 8
     682:	09 f0       	breq	.+2      	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
     684:	fc ce       	rjmp	.-520    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     686:	e0 91 45 38 	lds	r30, 0x3845	; 0x803845 <DccRx+0x6>
     68a:	e6 30       	cpi	r30, 0x06	; 6
     68c:	a9 f4       	brne	.+42     	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
     68e:	10 92 3f 38 	sts	0x383F, r1	; 0x80383f <DccRx>
     692:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <DccRx+0x1>
     696:	82 e9       	ldi	r24, 0x92	; 146
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <bitMax>
     69e:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <bitMax+0x1>
     6a2:	82 e5       	ldi	r24, 0x52	; 82
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <bitMin>
     6aa:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <bitMin+0x1>
     6ae:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <DccRx+0x3>
     6b2:	df ce       	rjmp	.-578    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     6b4:	81 60       	ori	r24, 0x01	; 1
     6b6:	e2 cf       	rjmp	.-60     	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
     6b8:	83 e0       	ldi	r24, 0x03	; 3
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <DccRx>
     6c0:	90 93 40 38 	sts	0x3840, r25	; 0x803840 <DccRx+0x1>
     6c4:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <DccRx+0x4>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	8e 0f       	add	r24, r30
     6cc:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <DccRx+0x6>
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	e1 5c       	subi	r30, 0xC1	; 193
     6d4:	f7 4c       	sbci	r31, 0xC7	; 199
     6d6:	90 87       	std	Z+8, r25	; 0x08
     6d8:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <DccRx+0x5>
     6dc:	89 27       	eor	r24, r25
     6de:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <DccRx+0x5>
     6e2:	c7 ce       	rjmp	.-626    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     6e4:	c0 17       	cp	r28, r16
     6e6:	d1 07       	cpc	r29, r17
     6e8:	28 f5       	brcc	.+74     	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
     6ea:	10 92 3f 38 	sts	0x383F, r1	; 0x80383f <DccRx>
     6ee:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <DccRx+0x1>
     6f2:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <DccRx+0x3>
     6f6:	82 e9       	ldi	r24, 0x92	; 146
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <bitMax>
     6fe:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <bitMax+0x1>
     702:	82 e5       	ldi	r24, 0x52	; 82
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <bitMin>
     70a:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <bitMin+0x1>
     70e:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <DccRx+0x5>
     712:	81 11       	cpse	r24, r1
     714:	b8 ce       	rjmp	.-656    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     716:	88 e0       	ldi	r24, 0x08	; 8
     718:	e5 e4       	ldi	r30, 0x45	; 69
     71a:	f8 e3       	ldi	r31, 0x38	; 56
     71c:	ad e4       	ldi	r26, 0x4D	; 77
     71e:	b8 e3       	ldi	r27, 0x38	; 56
     720:	01 90       	ld	r0, Z+
     722:	0d 92       	st	X+, r0
     724:	8a 95       	dec	r24
     726:	e1 f7       	brne	.-8      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	80 93 41 38 	sts	0x3841, r24	; 0x803841 <DccRx+0x2>
     72e:	10 92 2a 38 	sts	0x382A, r1	; 0x80382a <ExternalInterruptHandler()::preambleBitCount>
     732:	9f ce       	rjmp	.-706    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     734:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <DccRx+0x6>
     738:	86 30       	cpi	r24, 0x06	; 6
     73a:	09 f4       	brne	.+2      	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
     73c:	a8 cf       	rjmp	.-176    	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
     73e:	82 e0       	ldi	r24, 0x02	; 2
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <DccRx>
     746:	90 93 40 38 	sts	0x3840, r25	; 0x803840 <DccRx+0x1>
     74a:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <DccRx+0x3>
     74e:	10 92 43 38 	sts	0x3843, r1	; 0x803843 <DccRx+0x4>
     752:	8f ce       	rjmp	.-738    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     754:	10 92 2a 38 	sts	0x382A, r1	; 0x80382a <ExternalInterruptHandler()::preambleBitCount>
     758:	b7 ce       	rjmp	.-658    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>

0000075a <resetServiceModeTimer(unsigned char)>:
_Z21resetServiceModeTimerh():
     75a:	cf 93       	push	r28
     75c:	c8 2f       	mov	r28, r24
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	89 2b       	or	r24, r25
     764:	51 f0       	breq	.+20     	; 0x77a <resetServiceModeTimer(unsigned char)+0x20>
     766:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <DccProcState+0x2>
     76a:	8c 17       	cp	r24, r28
     76c:	31 f0       	breq	.+12     	; 0x77a <resetServiceModeTimer(unsigned char)+0x20>
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	c1 11       	cpse	r28, r1
     772:	01 c0       	rjmp	.+2      	; 0x776 <resetServiceModeTimer(unsigned char)+0x1c>
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
     77a:	c0 93 57 38 	sts	0x3857, r28	; 0x803857 <DccProcState+0x2>
     77e:	cc 23       	and	r28, r28
     780:	31 f1       	breq	.+76     	; 0x7ce <resetServiceModeTimer(unsigned char)+0x74>
millis():
     782:	2f b7       	in	r18, 0x3f	; 63
     784:	f8 94       	cli
     786:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <timingStruct+0x2>
     78a:	90 91 38 38 	lds	r25, 0x3838	; 0x803838 <timingStruct+0x3>
     78e:	a0 91 39 38 	lds	r26, 0x3839	; 0x803839 <timingStruct+0x4>
     792:	b0 91 3a 38 	lds	r27, 0x383A	; 0x80383a <timingStruct+0x5>
     796:	2f bf       	out	0x3f, r18	; 63
_Z21resetServiceModeTimerh():
     798:	48 2f       	mov	r20, r24
     79a:	39 2f       	mov	r19, r25
     79c:	2a 2f       	mov	r18, r26
     79e:	8b 2f       	mov	r24, r27
     7a0:	40 93 58 38 	sts	0x3858, r20	; 0x803858 <DccProcState+0x3>
     7a4:	30 93 59 38 	sts	0x3859, r19	; 0x803859 <DccProcState+0x4>
     7a8:	20 93 5a 38 	sts	0x385A, r18	; 0x80385a <DccProcState+0x5>
     7ac:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <DccProcState+0x6>
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	89 2b       	or	r24, r25
     7b6:	81 f0       	breq	.+32     	; 0x7d8 <resetServiceModeTimer(unsigned char)+0x7e>
     7b8:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <DccProcState+0x2>
     7bc:	8c 17       	cp	r24, r28
     7be:	61 f0       	breq	.+24     	; 0x7d8 <resetServiceModeTimer(unsigned char)+0x7e>
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	c1 11       	cpse	r28, r1
     7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <resetServiceModeTimer(unsigned char)+0x6e>
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	cf 91       	pop	r28
     7ca:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	e4 cf       	rjmp	.-56     	; 0x7a0 <resetServiceModeTimer(unsigned char)+0x46>
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <notifyDccSpeed>:
notifyDccSpeed():
     7dc:	08 95       	ret

000007de <notifyDccFunc>:
notifyDccFunc():
     7de:	08 95       	ret

000007e0 <writeCV(unsigned int, unsigned char)>:
_Z7writeCVjh():
     7e0:	ef 92       	push	r14
     7e2:	ff 92       	push	r15
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	ec 01       	movw	r28, r24
     7ec:	16 2f       	mov	r17, r22
     7ee:	83 31       	cpi	r24, 0x13	; 19
     7f0:	91 05       	cpc	r25, r1
     7f2:	d8 f4       	brcc	.+54     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     7f4:	81 31       	cpi	r24, 0x11	; 17
     7f6:	91 05       	cpc	r25, r1
     7f8:	28 f4       	brcc	.+10     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7fa:	81 30       	cpi	r24, 0x01	; 1
     7fc:	91 05       	cpc	r25, r1
     7fe:	11 f0       	breq	.+4      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     800:	09 97       	sbiw	r24, 0x09	; 9
     802:	31 f4       	brne	.+12     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     804:	8f ef       	ldi	r24, 0xFF	; 255
     806:	9f ef       	ldi	r25, 0xFF	; 255
     808:	80 93 6b 38 	sts	0x386B, r24	; 0x80386b <DccProcState+0x16>
     80c:	90 93 6c 38 	sts	0x386C, r25	; 0x80386c <DccProcState+0x17>
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	89 2b       	or	r24, r25
     816:	b9 f0       	breq	.+46     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     818:	61 2f       	mov	r22, r17
     81a:	ce 01       	movw	r24, r28
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	ff 90       	pop	r15
     824:	ef 90       	pop	r14
     826:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
     82a:	4d 97       	sbiw	r24, 0x1d	; 29
     82c:	89 f7       	brne	.-30     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     82e:	17 7f       	andi	r17, 0xF7	; 247
     830:	10 93 6e 38 	sts	0x386E, r17	; 0x80386e <DccProcState+0x19>
     834:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <DccProcState>
     838:	8f 73       	andi	r24, 0x3F	; 63
     83a:	91 2f       	mov	r25, r17
     83c:	90 7c       	andi	r25, 0xC0	; 192
     83e:	89 2b       	or	r24, r25
     840:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <DccProcState>
     844:	df cf       	rjmp	.-66     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
_ZNK5EERefdeEv():
     846:	7e 01       	movw	r14, r28
     848:	ff 24       	eor	r15, r15
     84a:	8c ee       	ldi	r24, 0xEC	; 236
     84c:	f8 1a       	sub	r15, r24
_Z7writeCVjh():
     84e:	d7 01       	movw	r26, r14
     850:	8c 91       	ld	r24, X
     852:	18 17       	cp	r17, r24
     854:	11 f1       	breq	.+68     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
operator=():
     856:	81 2f       	mov	r24, r17
     858:	e0 e0       	ldi	r30, 0x00	; 0
     85a:	f0 e1       	ldi	r31, 0x10	; 16
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	22 81       	ldd	r18, Z+2	; 0x02
     860:	23 70       	andi	r18, 0x03	; 3
     862:	e9 f7       	brne	.-6      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     864:	f8 94       	cli
     866:	8c 93       	st	X, r24
     868:	8d e9       	ldi	r24, 0x9D	; 157
     86a:	84 bf       	out	0x34, r24	; 52
     86c:	83 e0       	ldi	r24, 0x03	; 3
     86e:	80 83       	st	Z, r24
     870:	0f be       	out	0x3f, r0	; 63
_Z7writeCVjh():
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	89 2b       	or	r24, r25
     878:	21 f0       	breq	.+8      	; 0x882 <__DATA_REGION_LENGTH__+0x82>
     87a:	61 2f       	mov	r22, r17
     87c:	ce 01       	movw	r24, r28
     87e:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	89 2b       	or	r24, r25
     888:	41 f0       	breq	.+16     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
     88a:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <DccProcState>
     88e:	84 fd       	sbrc	r24, 4
     890:	04 c0       	rjmp	.+8      	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
     892:	61 2f       	mov	r22, r17
     894:	ce 01       	movw	r24, r28
     896:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
     89a:	f7 01       	movw	r30, r14
     89c:	80 81       	ld	r24, Z
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	ff 90       	pop	r15
     8a6:	ef 90       	pop	r14
     8a8:	08 95       	ret

000008aa <readCV(unsigned int)>:
_Z6readCVj():
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	23 2b       	or	r18, r19
     8b0:	11 f0       	breq	.+4      	; 0x8b6 <readCV(unsigned int)+0xc>
     8b2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
_ZNK5EERefdeEv():
     8b6:	99 27       	eor	r25, r25
     8b8:	fc 01       	movw	r30, r24
     8ba:	fc 5e       	subi	r31, 0xEC	; 236
_Z6readCVj():
     8bc:	80 81       	ld	r24, Z
     8be:	08 95       	ret

000008c0 <getMyAddr()>:
_Z9getMyAddrv():
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	20 91 6b 38 	lds	r18, 0x386B	; 0x80386b <DccProcState+0x16>
     8c8:	30 91 6c 38 	lds	r19, 0x386C	; 0x80386c <DccProcState+0x17>
     8cc:	2f 3f       	cpi	r18, 0xFF	; 255
     8ce:	32 07       	cpc	r19, r18
     8d0:	21 f0       	breq	.+8      	; 0x8da <getMyAddr()+0x1a>
     8d2:	c9 01       	movw	r24, r18
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret
     8da:	80 91 6e 38 	lds	r24, 0x386E	; 0x80386e <DccProcState+0x19>
     8de:	87 ff       	sbrs	r24, 7
     8e0:	27 c0       	rjmp	.+78     	; 0x930 <getMyAddr()+0x70>
     8e2:	86 ff       	sbrs	r24, 6
     8e4:	0d c0       	rjmp	.+26     	; 0x900 <getMyAddr()+0x40>
     8e6:	89 e0       	ldi	r24, 0x09	; 9
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	df df       	rcall	.-66     	; 0x8aa <readCV(unsigned int)>
     8ec:	c8 2f       	mov	r28, r24
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	db df       	rcall	.-74     	; 0x8aa <readCV(unsigned int)>
     8f4:	9c 2f       	mov	r25, r28
     8f6:	80 93 6b 38 	sts	0x386B, r24	; 0x80386b <DccProcState+0x16>
     8fa:	90 93 6c 38 	sts	0x386C, r25	; 0x80386c <DccProcState+0x17>
     8fe:	13 c0       	rjmp	.+38     	; 0x926 <getMyAddr()+0x66>
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	d2 df       	rcall	.-92     	; 0x8aa <readCV(unsigned int)>
     906:	c8 2f       	mov	r28, r24
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	ce df       	rcall	.-100    	; 0x8aa <readCV(unsigned int)>
     90e:	90 e4       	ldi	r25, 0x40	; 64
     910:	c9 9f       	mul	r28, r25
     912:	90 01       	movw	r18, r0
     914:	11 24       	eor	r1, r1
     916:	20 7c       	andi	r18, 0xC0	; 192
     918:	31 70       	andi	r19, 0x01	; 1
     91a:	8f 73       	andi	r24, 0x3F	; 63
     91c:	28 2b       	or	r18, r24
     91e:	20 93 6b 38 	sts	0x386B, r18	; 0x80386b <DccProcState+0x16>
     922:	30 93 6c 38 	sts	0x386C, r19	; 0x80386c <DccProcState+0x17>
     926:	80 91 6b 38 	lds	r24, 0x386B	; 0x80386b <DccProcState+0x16>
     92a:	90 91 6c 38 	lds	r25, 0x386C	; 0x80386c <DccProcState+0x17>
     92e:	d2 cf       	rjmp	.-92     	; 0x8d4 <getMyAddr()+0x14>
     930:	85 ff       	sbrs	r24, 5
     932:	0a c0       	rjmp	.+20     	; 0x948 <getMyAddr()+0x88>
     934:	81 e1       	ldi	r24, 0x11	; 17
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	b8 df       	rcall	.-144    	; 0x8aa <readCV(unsigned int)>
     93a:	c8 2f       	mov	r28, r24
     93c:	82 e1       	ldi	r24, 0x12	; 18
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	b4 df       	rcall	.-152    	; 0x8aa <readCV(unsigned int)>
     942:	c0 5c       	subi	r28, 0xC0	; 192
     944:	dd 0b       	sbc	r29, r29
     946:	d6 cf       	rjmp	.-84     	; 0x8f4 <getMyAddr()+0x34>
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	ae df       	rcall	.-164    	; 0x8aa <readCV(unsigned int)>
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	d2 cf       	rjmp	.-92     	; 0x8f6 <getMyAddr()+0x36>

00000952 <validCV(unsigned int, unsigned char)>:
_Z7validCVjh():
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	ec 01       	movw	r28, r24
     95a:	16 2f       	mov	r17, r22
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	89 2b       	or	r24, r25
     962:	91 f0       	breq	.+36     	; 0x988 <validCV(unsigned int, unsigned char)+0x36>
     964:	c8 30       	cpi	r28, 0x08	; 8
     966:	d1 05       	cpc	r29, r1
     968:	79 f4       	brne	.+30     	; 0x988 <validCV(unsigned int, unsigned char)+0x36>
     96a:	66 23       	and	r22, r22
     96c:	19 f1       	breq	.+70     	; 0x9b4 <validCV(unsigned int, unsigned char)+0x62>
     96e:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	89 2b       	or	r24, r25
     978:	b9 f0       	breq	.+46     	; 0x9a8 <validCV(unsigned int, unsigned char)+0x56>
     97a:	61 2f       	mov	r22, r17
     97c:	ce 01       	movw	r24, r28
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	89 2b       	or	r24, r25
     98e:	a9 f7       	brne	.-22     	; 0x97a <validCV(unsigned int, unsigned char)+0x28>
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	c1 15       	cp	r28, r1
     994:	95 e1       	ldi	r25, 0x15	; 21
     996:	d9 07       	cpc	r29, r25
     998:	08 f0       	brcs	.+2      	; 0x99c <validCV(unsigned int, unsigned char)+0x4a>
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	11 11       	cpse	r17, r1
     99e:	05 c0       	rjmp	.+10     	; 0x9aa <validCV(unsigned int, unsigned char)+0x58>
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	08 95       	ret
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	27 97       	sbiw	r28, 0x07	; 7
     9ac:	22 97       	sbiw	r28, 0x02	; 2
     9ae:	c0 f7       	brcc	.-16     	; 0x9a0 <validCV(unsigned int, unsigned char)+0x4e>
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	f6 cf       	rjmp	.-20     	; 0x9a0 <validCV(unsigned int, unsigned char)+0x4e>
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	89 2b       	or	r24, r25
     9ba:	f9 f6       	brne	.-66     	; 0x97a <validCV(unsigned int, unsigned char)+0x28>
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	f0 cf       	rjmp	.-32     	; 0x9a0 <validCV(unsigned int, unsigned char)+0x4e>

000009c0 <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())>:
_Z24processDirectCVOperationhjhPFvvE():
     9c0:	bf 92       	push	r11
     9c2:	cf 92       	push	r12
     9c4:	df 92       	push	r13
     9c6:	ef 92       	push	r14
     9c8:	ff 92       	push	r15
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	8b 01       	movw	r16, r22
     9d4:	b4 2e       	mov	r11, r20
     9d6:	69 01       	movw	r12, r18
     9d8:	82 ff       	sbrs	r24, 2
     9da:	1f c0       	rjmp	.+62     	; 0xa1a <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0x5a>
     9dc:	83 ff       	sbrs	r24, 3
     9de:	15 c0       	rjmp	.+42     	; 0xa0a <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0x4a>
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	c8 01       	movw	r24, r16
     9e4:	b6 df       	rcall	.-148    	; 0x952 <validCV(unsigned int, unsigned char)>
     9e6:	88 23       	and	r24, r24
     9e8:	a9 f1       	breq	.+106    	; 0xa54 <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0x94>
     9ea:	6b 2d       	mov	r22, r11
     9ec:	c8 01       	movw	r24, r16
     9ee:	f8 de       	rcall	.-528    	; 0x7e0 <writeCV(unsigned int, unsigned char)>
     9f0:	8b 11       	cpse	r24, r11
     9f2:	30 c0       	rjmp	.+96     	; 0xa54 <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0x94>
     9f4:	f6 01       	movw	r30, r12
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	df 90       	pop	r13
     a04:	cf 90       	pop	r12
     a06:	bf 90       	pop	r11
     a08:	09 94       	ijmp
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	c8 01       	movw	r24, r16
     a0e:	a1 df       	rcall	.-190    	; 0x952 <validCV(unsigned int, unsigned char)>
     a10:	88 23       	and	r24, r24
     a12:	01 f1       	breq	.+64     	; 0xa54 <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0x94>
     a14:	c8 01       	movw	r24, r16
     a16:	49 df       	rcall	.-366    	; 0x8aa <readCV(unsigned int)>
     a18:	eb cf       	rjmp	.-42     	; 0x9f0 <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0x30>
     a1a:	84 2f       	mov	r24, r20
     a1c:	87 70       	andi	r24, 0x07	; 7
     a1e:	c1 e0       	ldi	r28, 0x01	; 1
     a20:	d0 e0       	ldi	r29, 0x00	; 0
     a22:	7e 01       	movw	r14, r28
     a24:	01 c0       	rjmp	.+2      	; 0xa28 <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0x68>
     a26:	ee 0c       	add	r14, r14
     a28:	8a 95       	dec	r24
     a2a:	ea f7       	brpl	.-6      	; 0xa26 <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0x66>
     a2c:	d4 2f       	mov	r29, r20
     a2e:	d8 70       	andi	r29, 0x08	; 8
     a30:	cb 01       	movw	r24, r22
     a32:	3b df       	rcall	.-394    	; 0x8aa <readCV(unsigned int)>
     a34:	c8 2f       	mov	r28, r24
     a36:	b4 fe       	sbrs	r11, 4
     a38:	1a c0       	rjmp	.+52     	; 0xa6e <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0xae>
     a3a:	61 e0       	ldi	r22, 0x01	; 1
     a3c:	c8 01       	movw	r24, r16
     a3e:	89 df       	rcall	.-238    	; 0x952 <validCV(unsigned int, unsigned char)>
     a40:	88 23       	and	r24, r24
     a42:	41 f0       	breq	.+16     	; 0xa54 <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0x94>
     a44:	dd 23       	and	r29, r29
     a46:	81 f0       	breq	.+32     	; 0xa68 <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0xa8>
     a48:	ce 29       	or	r28, r14
     a4a:	6c 2f       	mov	r22, r28
     a4c:	c8 01       	movw	r24, r16
     a4e:	c8 de       	rcall	.-624    	; 0x7e0 <writeCV(unsigned int, unsigned char)>
     a50:	8c 17       	cp	r24, r28
     a52:	81 f2       	breq	.-96     	; 0x9f4 <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0x34>
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	cf 90       	pop	r12
     a64:	bf 90       	pop	r11
     a66:	08 95       	ret
     a68:	e0 94       	com	r14
     a6a:	ce 21       	and	r28, r14
     a6c:	ee cf       	rjmp	.-36     	; 0xa4a <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0x8a>
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	c8 01       	movw	r24, r16
     a72:	6f df       	rcall	.-290    	; 0x952 <validCV(unsigned int, unsigned char)>
     a74:	88 23       	and	r24, r24
     a76:	71 f3       	breq	.-36     	; 0xa54 <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0x94>
     a78:	ce 21       	and	r28, r14
     a7a:	dd 23       	and	r29, r29
     a7c:	19 f0       	breq	.+6      	; 0xa84 <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0xc4>
     a7e:	c1 11       	cpse	r28, r1
     a80:	b9 cf       	rjmp	.-142    	; 0x9f4 <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0x34>
     a82:	e8 cf       	rjmp	.-48     	; 0xa54 <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0x94>
     a84:	cc 23       	and	r28, r28
     a86:	09 f4       	brne	.+2      	; 0xa8a <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0xca>
     a88:	b5 cf       	rjmp	.-150    	; 0x9f4 <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0x34>
     a8a:	e4 cf       	rjmp	.-56     	; 0xa54 <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())+0x94>

00000a8c <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)>:
_Z27processMultiFunctionMessagej13DCC_ADDR_TYPEhhh():
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	7c 01       	movw	r14, r24
     a9e:	6b 01       	movw	r12, r22
     aa0:	c4 2f       	mov	r28, r20
     aa2:	12 2f       	mov	r17, r18
     aa4:	d4 2f       	mov	r29, r20
     aa6:	d0 7e       	andi	r29, 0xE0	; 224
     aa8:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <DccProcState>
     aac:	87 ff       	sbrs	r24, 7
     aae:	29 c0       	rjmp	.+82     	; 0xb02 <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)+0x76>
     ab0:	d0 3e       	cpi	r29, 0xE0	; 224
     ab2:	71 f5       	brne	.+92     	; 0xb10 <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)+0x84>
     ab4:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <DccProcState+0x1>
     ab8:	88 23       	and	r24, r24
     aba:	51 f1       	breq	.+84     	; 0xb10 <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)+0x84>
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	f5 de       	rcall	.-534    	; 0x8aa <readCV(unsigned int)>
     ac0:	d8 2f       	mov	r29, r24
     ac2:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <DccProcState+0x1>
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	01 96       	adiw	r24, 0x01	; 1
     aca:	ef de       	rcall	.-546    	; 0x8aa <readCV(unsigned int)>
     acc:	98 2f       	mov	r25, r24
     ace:	8d 2f       	mov	r24, r29
     ad0:	e8 16       	cp	r14, r24
     ad2:	f9 06       	cpc	r15, r25
     ad4:	e9 f4       	brne	.+58     	; 0xb10 <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)+0x84>
     ad6:	6c 2f       	mov	r22, r28
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	76 2f       	mov	r23, r22
     adc:	66 27       	eor	r22, r22
     ade:	66 27       	eor	r22, r22
     ae0:	73 70       	andi	r23, 0x03	; 3
     ae2:	61 2b       	or	r22, r17
     ae4:	6f 5f       	subi	r22, 0xFF	; 255
     ae6:	7f 4f       	sbci	r23, 0xFF	; 255
     ae8:	22 ec       	ldi	r18, 0xC2	; 194
     aea:	35 e0       	ldi	r19, 0x05	; 5
     aec:	40 2f       	mov	r20, r16
     aee:	8c 2f       	mov	r24, r28
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	df 90       	pop	r13
     afe:	cf 90       	pop	r12
     b00:	5f cf       	rjmp	.-322    	; 0x9c0 <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())>
     b02:	80 fd       	sbrc	r24, 0
     b04:	13 c0       	rjmp	.+38     	; 0xb2c <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)+0xa0>
     b06:	d0 34       	cpi	r29, 0x40	; 64
     b08:	61 f1       	breq	.+88     	; 0xb62 <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)+0xd6>
     b0a:	58 f4       	brcc	.+22     	; 0xb22 <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)+0x96>
     b0c:	dd 23       	and	r29, r29
     b0e:	b1 f0       	breq	.+44     	; 0xb3c <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)+0xb0>
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	df 90       	pop	r13
     b1e:	cf 90       	pop	r12
     b20:	08 95       	ret
     b22:	d0 36       	cpi	r29, 0x60	; 96
     b24:	f1 f0       	breq	.+60     	; 0xb62 <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)+0xd6>
     b26:	d0 3e       	cpi	r29, 0xE0	; 224
     b28:	b1 f2       	breq	.-84     	; 0xad6 <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)+0x4a>
     b2a:	f2 cf       	rjmp	.-28     	; 0xb10 <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)+0x84>
     b2c:	c9 de       	rcall	.-622    	; 0x8c0 <getMyAddr()>
     b2e:	8e 15       	cp	r24, r14
     b30:	9f 05       	cpc	r25, r15
     b32:	49 f3       	breq	.-46     	; 0xb06 <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)+0x7a>
     b34:	e1 14       	cp	r14, r1
     b36:	f1 04       	cpc	r15, r1
     b38:	31 f3       	breq	.-52     	; 0xb06 <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)+0x7a>
     b3a:	ea cf       	rjmp	.-44     	; 0xb10 <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)+0x84>
     b3c:	8c 2f       	mov	r24, r28
     b3e:	8e 70       	andi	r24, 0x0E	; 14
     b40:	39 f7       	brne	.-50     	; 0xb10 <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)+0x84>
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	89 2b       	or	r24, r25
     b48:	19 f3       	breq	.-58     	; 0xb10 <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)+0x84>
     b4a:	8c 2f       	mov	r24, r28
     b4c:	81 70       	andi	r24, 0x01	; 1
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	cf 90       	pop	r12
     b5e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	89 2b       	or	r24, r25
     b68:	99 f2       	breq	.-90     	; 0xb10 <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)+0x84>
     b6a:	4c 2f       	mov	r20, r28
     b6c:	b6 01       	movw	r22, r12
     b6e:	c7 01       	movw	r24, r14
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	df 90       	pop	r13
     b7e:	cf 90       	pop	r12
     b80:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

00000b84 <ackAdvancedCV()>:
_Z13ackAdvancedCVv():
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	89 2b       	or	r24, r25
     b8a:	29 f0       	breq	.+10     	; 0xb96 <ackAdvancedCV()+0x12>
     b8c:	80 91 6e 38 	lds	r24, 0x386E	; 0x80386e <DccProcState+0x19>
     b90:	83 fd       	sbrc	r24, 3
     b92:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
     b96:	08 95       	ret

00000b98 <clearDccProcState(unsigned char)>:
_Z17clearDccProcStateh():
     b98:	e0 dd       	rcall	.-1088   	; 0x75a <resetServiceModeTimer(unsigned char)>
     b9a:	e5 e5       	ldi	r30, 0x55	; 85
     b9c:	f8 e3       	ldi	r31, 0x38	; 56
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	87 83       	std	Z+7, r24	; 0x07
     ba2:	10 86       	std	Z+8, r1	; 0x08
     ba4:	ee e5       	ldi	r30, 0x5E	; 94
     ba6:	f8 e3       	ldi	r31, 0x38	; 56
     ba8:	88 e0       	ldi	r24, 0x08	; 8
     baa:	df 01       	movw	r26, r30
     bac:	1d 92       	st	X+, r1
     bae:	8a 95       	dec	r24
     bb0:	e9 f7       	brne	.-6      	; 0xbac <clearDccProcState(unsigned char)+0x14>
     bb2:	08 95       	ret

00000bb4 <__vector_15>:
__vector_15():
     bb4:	ef 93       	push	r30
     bb6:	ff 93       	push	r31
     bb8:	e5 e3       	ldi	r30, 0x35	; 53
     bba:	f8 e3       	ldi	r31, 0x38	; 56
     bbc:	8f 93       	push	r24
     bbe:	8f b7       	in	r24, 0x3f	; 63
     bc0:	8f 93       	push	r24
     bc2:	9f 93       	push	r25
     bc4:	7f 93       	push	r23
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	91 81       	ldd	r25, Z+1	; 0x01
     bcc:	80 5d       	subi	r24, 0xD0	; 208
     bce:	9c 4f       	sbci	r25, 0xFC	; 252
     bd0:	80 83       	st	Z, r24
     bd2:	91 83       	std	Z+1, r25	; 0x01
     bd4:	88 5e       	subi	r24, 0xE8	; 232
     bd6:	93 40       	sbci	r25, 0x03	; 3
     bd8:	18 f0       	brcs	.+6      	; 0xbe0 <lower>
     bda:	80 83       	st	Z, r24
     bdc:	91 83       	std	Z+1, r25	; 0x01
     bde:	7f 5f       	subi	r23, 0xFF	; 255

00000be0 <lower>:
     be0:	92 81       	ldd	r25, Z+2	; 0x02
     be2:	97 0f       	add	r25, r23
     be4:	92 83       	std	Z+2, r25	; 0x02
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	93 81       	ldd	r25, Z+3	; 0x03
     bea:	98 1f       	adc	r25, r24
     bec:	93 83       	std	Z+3, r25	; 0x03
     bee:	94 81       	ldd	r25, Z+4	; 0x04
     bf0:	98 1f       	adc	r25, r24
     bf2:	94 83       	std	Z+4, r25	; 0x04
     bf4:	95 81       	ldd	r25, Z+5	; 0x05
     bf6:	98 1f       	adc	r25, r24
     bf8:	95 83       	std	Z+5, r25	; 0x05
     bfa:	96 81       	ldd	r25, Z+6	; 0x06
     bfc:	9f 5f       	subi	r25, 0xFF	; 255
     bfe:	96 83       	std	Z+6, r25	; 0x06
     c00:	97 81       	ldd	r25, Z+7	; 0x07
     c02:	9f 4f       	sbci	r25, 0xFF	; 255
     c04:	97 83       	std	Z+7, r25	; 0x07
     c06:	90 85       	ldd	r25, Z+8	; 0x08
     c08:	9f 4f       	sbci	r25, 0xFF	; 255
     c0a:	90 87       	std	Z+8, r25	; 0x08
     c0c:	91 85       	ldd	r25, Z+9	; 0x09
     c0e:	9f 4f       	sbci	r25, 0xFF	; 255
     c10:	91 87       	std	Z+9, r25	; 0x09
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	80 93 8d 0a 	sts	0x0A8D, r24	; 0x800a8d <digital_pin_to_bit_position+0x7f75f5>
     c18:	7f 91       	pop	r23
     c1a:	9f 91       	pop	r25
     c1c:	8f 91       	pop	r24
     c1e:	8f bf       	out	0x3f, r24	; 63
     c20:	8f 91       	pop	r24
     c22:	ff 91       	pop	r31
     c24:	ef 91       	pop	r30
     c26:	18 95       	reti

00000c28 <__vector_5>:
__vector_5():
     c28:	0f 93       	push	r16
     c2a:	04 e0       	ldi	r16, 0x04	; 4
     c2c:	06 c0       	rjmp	.+12     	; 0xc3a <isrBody>

00000c2e <__vector_4>:
__vector_4():
     c2e:	0f 93       	push	r16
     c30:	02 e0       	ldi	r16, 0x02	; 2
     c32:	03 c0       	rjmp	.+6      	; 0xc3a <isrBody>

00000c34 <__vector_3>:
__vector_3():
     c34:	0f 93       	push	r16
     c36:	00 e0       	ldi	r16, 0x00	; 0
     c38:	00 c0       	rjmp	.+0      	; 0xc3a <isrBody>

00000c3a <isrBody>:
isrBody():
     c3a:	0f 92       	push	r0
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	0f 92       	push	r0
     c40:	1f 92       	push	r1
     c42:	11 24       	eor	r1, r1
     c44:	ff 92       	push	r15
     c46:	1f 93       	push	r17
     c48:	2f 93       	push	r18
     c4a:	3f 93       	push	r19
     c4c:	4f 93       	push	r20
     c4e:	5f 93       	push	r21
     c50:	6f 93       	push	r22
     c52:	7f 93       	push	r23
     c54:	8f 93       	push	r24
     c56:	9f 93       	push	r25
     c58:	af 93       	push	r26
     c5a:	bf 93       	push	r27
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	ef 93       	push	r30
     c62:	ff 93       	push	r31
     c64:	a0 e0       	ldi	r26, 0x00	; 0
     c66:	b8 e3       	ldi	r27, 0x38	; 56
     c68:	a0 0f       	add	r26, r16
     c6a:	b1 1d       	adc	r27, r1
     c6c:	cd 91       	ld	r28, X+
     c6e:	dc 91       	ld	r29, X
     c70:	00 0f       	add	r16, r16
     c72:	0d 5f       	subi	r16, 0xFD	; 253
     c74:	a0 2f       	mov	r26, r16
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	fc 90       	ld	r15, X
     c7a:	10 97       	sbiw	r26, 0x00	; 0
     c7c:	61 f0       	breq	.+24     	; 0xc96 <AIntEnd>
     c7e:	1f 2d       	mov	r17, r15

00000c80 <AIntLoop>:
     c80:	16 95       	lsr	r17
     c82:	18 f0       	brcs	.+6      	; 0xc8a <AIntLoop+0xa>
     c84:	41 f0       	breq	.+16     	; 0xc96 <AIntEnd>
     c86:	22 96       	adiw	r28, 0x02	; 2
     c88:	fb cf       	rjmp	.-10     	; 0xc80 <AIntLoop>
     c8a:	e9 91       	ld	r30, Y+
     c8c:	f9 91       	ld	r31, Y+
     c8e:	30 97       	sbiw	r30, 0x00	; 0
     c90:	b9 f3       	breq	.-18     	; 0xc80 <AIntLoop>
     c92:	09 95       	icall
     c94:	f5 cf       	rjmp	.-22     	; 0xc80 <AIntLoop>

00000c96 <AIntEnd>:
     c96:	a0 2f       	mov	r26, r16
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	fc 92       	st	X, r15
     c9c:	ff 91       	pop	r31
     c9e:	ef 91       	pop	r30
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	bf 91       	pop	r27
     ca6:	af 91       	pop	r26
     ca8:	9f 91       	pop	r25
     caa:	8f 91       	pop	r24
     cac:	7f 91       	pop	r23
     cae:	6f 91       	pop	r22
     cb0:	5f 91       	pop	r21
     cb2:	4f 91       	pop	r20
     cb4:	3f 91       	pop	r19
     cb6:	2f 91       	pop	r18
     cb8:	1f 91       	pop	r17
     cba:	ff 90       	pop	r15
     cbc:	1f 90       	pop	r1
     cbe:	0f 90       	pop	r0
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	0f 90       	pop	r0
     cc4:	0f 91       	pop	r16
     cc6:	18 95       	reti

00000cc8 <main>:
main():
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:1549
    #if (defined(CLOCK_TUNE_INTERNAL))
      tune_internal(); // Will be inlined as only called once. Just too long and ugly to put two implementations in middle of this.
    #else
      #if (F_CPU == 20000000)
        /* No division on clock */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, 0x00);
     cc8:	88 ed       	ldi	r24, 0xD8	; 216
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	84 bf       	out	0x34, r24	; 52
     cce:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <digital_pin_to_bit_position+0x7f6bc9>
init_ADC0():
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:1664


/********************************* ADC ****************************************/
void __attribute__((weak)) init_ADC0() {
  ADC_t* pADC;
  _fastPtr_d(pADC, &ADC0);
     cd2:	e0 e0       	ldi	r30, 0x00	; 0
     cd4:	f6 e0       	ldi	r31, 0x06	; 6
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:1685
   **************************************************************************/
    //                              30 MHz / 32 = 937 kHz,  32 MHz / 32 =  1 MHz.
    #if   F_CPU   > 24000000     // 24 MHz / 16 = 1.5 MHz,  25 MHz / 32 =  780 kHz
      pADC->CTRLC  = ADC_PRESC_DIV32_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #elif F_CPU  >= 12000000    // 16 MHz / 16 = 1.0 MHz,  20 MHz / 16 = 1.25 MHz
      pADC->CTRLC  = ADC_PRESC_DIV16_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
     cd6:	83 e5       	ldi	r24, 0x53	; 83
     cd8:	82 83       	std	Z+2, r24	; 0x02
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:1696
      pADC->CTRLC  =  ADC_PRESC_DIV2_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #endif
    #if   (F_CPU == 6000000 || F_CPU == 12000000 || F_CPU == 24000000 || F_CPU ==25000000)
      pADC->SAMPCTRL = (7); // 9 ADC clocks, 12 us
    #elif (F_CPU == 5000000 || F_CPU == 10000000 || F_CPU == 20000000)
      pADC->SAMPCTRL = (13);   // 15 ADC clock,s 12 us
     cda:	8d e0       	ldi	r24, 0x0D	; 13
     cdc:	85 83       	std	Z+5, r24	; 0x05
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:1700
    #else
      pADC->SAMPCTRL = (10); // 12 ADC clocks, 12 us
    #endif
    pADC->CTRLD    = ADC_INITDLY_DLY16_gc;
     cde:	80 e2       	ldi	r24, 0x20	; 32
     ce0:	83 83       	std	Z+3, r24	; 0x03
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:1701
    pADC->CTRLA    = ADC_ENABLE_bm;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	80 83       	st	Z, r24
init_TCA0():
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:1791

void __attribute__((weak)) init_TCA0() {
  /*  TYPE A TIMER   */
  #if !defined(TCA_BUFFERED_3PIN)
    #if defined(PORTMUX_CTRLC)
      PORTMUX.CTRLC = TCA_PORTMUX;
     ce6:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <digital_pin_to_bit_position+0x7f6d6a>
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:1795
    #else
      PORTMUX.TCAROUTEA = TCA_PORTMUX;
    #endif
    TCA0.SPLIT.CTRLD   = TCA_SPLIT_SPLITM_bm;
     cea:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <digital_pin_to_bit_position+0x7f756b>
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:1796
    TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
     cee:	9e ef       	ldi	r25, 0xFE	; 254
     cf0:	90 93 26 0a 	sts	0x0A26, r25	; 0x800a26 <digital_pin_to_bit_position+0x7f758e>
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:1797
    TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
     cf4:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <digital_pin_to_bit_position+0x7f758f>
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:1798
    TCA0.SPLIT.CTRLA   = (TIMERA_PRESCALER_bm | TCA_SPLIT_ENABLE_bm);
     cf8:	9b e0       	ldi	r25, 0x0B	; 11
     cfa:	90 93 00 0a 	sts	0x0A00, r25	; 0x800a00 <digital_pin_to_bit_position+0x7f7568>
init_millis():
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:1440
      #endif
    #elif defined(MILLIS_USE_TIMERA1)
      TCA1.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm;
    #elif defined(MILLIS_USE_TIMERD0)
      TCD_t* pTCD;
      _fastPtr_d(pTCD, &TCD0);
     cfe:	e0 e8       	ldi	r30, 0x80	; 128
     d00:	fa e0       	ldi	r31, 0x0A	; 10
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:1441
      pTCD->CMPBCLR        = TIME_TRACKING_TIMER_PERIOD; // essentially, this is TOP
     d02:	2d ef       	ldi	r18, 0xFD	; 253
     d04:	31 e0       	ldi	r19, 0x01	; 1
     d06:	26 a7       	std	Z+46, r18	; 0x2e
     d08:	37 a7       	std	Z+47, r19	; 0x2f
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:1442
      pTCD->CTRLB          = 0x00; // oneramp mode
     d0a:	11 82       	std	Z+1, r1	; 0x01
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:1443
      pTCD->CTRLC          = 0x80;
     d0c:	90 e8       	ldi	r25, 0x80	; 128
     d0e:	92 83       	std	Z+2, r25	; 0x02
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:1444
      pTCD->INTCTRL        = 0x01; // enable interrupt
     d10:	84 87       	std	Z+12, r24	; 0x0c
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:1445
      pTCD->CTRLA          = TIMERD0_PRESCALER | 0x01; // set clock source and enable!
     d12:	81 e1       	ldi	r24, 0x11	; 17
     d14:	80 83       	st	Z, r24
main():
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:1530
    init_millis();
  #endif
  /*************************** ENABLE GLOBAL INTERRUPTS *************************/
  // Finally, after everything is initialized, we go ahead and enable interrupts.
  if (onAfterInit()) {
    sei();
     d16:	78 94       	sei
init():
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1598
{
    #if defined(ESP8266) ||  defined(ESP32) || defined(ARDUINO_ARCH_RP2040)
    EEPROM.begin (MAXCV);
    #endif
    // Clear all the static member variables
    memset (&DccRx, 0, sizeof (DccRx));
     d18:	ef e3       	ldi	r30, 0x3F	; 63
     d1a:	f8 e3       	ldi	r31, 0x38	; 56
     d1c:	86 e1       	ldi	r24, 0x16	; 22
     d1e:	df 01       	movw	r26, r30
     d20:	1d 92       	st	X+, r1
     d22:	8a 95       	dec	r24
     d24:	e9 f7       	brne	.-6      	; 0xd20 <main+0x58>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1604

    MODE_TP1; // only for debugging and timing measurement
    MODE_TP2;
    MODE_TP3;
    MODE_TP4;
    bitMax = MAX_ONEBITFULL;
     d26:	82 e9       	ldi	r24, 0x92	; 146
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <bitMax>
     d2e:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <bitMax+0x1>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1605
    bitMin = MIN_ONEBITFULL;
     d32:	82 e5       	ldi	r24, 0x52	; 82
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <bitMin>
     d3a:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <bitMin+0x1>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1607

    DccProcState.Flags = Flags ;
     d3e:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <DccProcState>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1608
    DccProcState.OpsModeAddressBaseCV = OpsModeAddressBaseCV ;
     d42:	10 92 56 38 	sts	0x3856, r1	; 0x803856 <DccProcState+0x1>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1609
    DccProcState.myDccAddress = -1;
     d46:	8f ef       	ldi	r24, 0xFF	; 255
     d48:	9f ef       	ldi	r25, 0xFF	; 255
     d4a:	80 93 6b 38 	sts	0x386B, r24	; 0x80386b <DccProcState+0x16>
     d4e:	90 93 6c 38 	sts	0x386C, r25	; 0x80386c <DccProcState+0x17>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1610
    DccProcState.inAccDecDCCAddrNextReceivedMode = 0;
     d52:	10 92 6d 38 	sts	0x386D, r1	; 0x80386d <DccProcState+0x18>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1612

    ISREdge = RISING;
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <ISREdge>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1614
    // level checking to detect false IRQ's fired by glitches
    ISRLevel = DccProcState.ExtIntMask;
     d5c:	80 91 6a 38 	lds	r24, 0x386A	; 0x80386a <DccProcState+0x15>
     d60:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <ISRLevel>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1621

    #ifdef ESP32
    ISRWatch = ISREdge;
    attachInterrupt (DccProcState.ExtIntNum, ExternalInterruptHandler, CHANGE);
    #else
    attachInterrupt (DccProcState.ExtIntNum, ExternalInterruptHandler, RISING);
     d64:	63 e0       	ldi	r22, 0x03	; 3
     d66:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <DccProcState+0x11>
     d6a:	b1 da       	rcall	.-2718   	; 0x2ce <attachInterrupt.constprop.10>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1627
    #endif

    // Set the Bits that control Multifunction or Accessory behaviour
    // and if the Accessory decoder optionally handles Output Addressing
    // we need to peal off the top two bits
    DccProcState.cv29Value = writeCV (CV_29_CONFIG, (readCV (CV_29_CONFIG) & ~FLAGS_CV29_BITS) | (Flags & FLAGS_CV29_BITS)) ;
     d6c:	8d e1       	ldi	r24, 0x1D	; 29
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	9c dd       	rcall	.-1224   	; 0x8aa <readCV(unsigned int)>
     d72:	68 2f       	mov	r22, r24
     d74:	6f 73       	andi	r22, 0x3F	; 63
     d76:	8d e1       	ldi	r24, 0x1D	; 29
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	32 dd       	rcall	.-1436   	; 0x7e0 <writeCV(unsigned int, unsigned char)>
     d7c:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <DccProcState+0x19>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1633

    uint8_t doAutoFactoryDefault = 0;
    if ( (Flags & FLAGS_AUTO_FACTORY_DEFAULT) && (readCV (CV_VERSION_ID) == 255) && (readCV (CV_MANUFACTURER_ID) == 255))
        doAutoFactoryDefault = 1;

    writeCV (CV_VERSION_ID, VersionId) ;
     d80:	6a e0       	ldi	r22, 0x0A	; 10
     d82:	87 e0       	ldi	r24, 0x07	; 7
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	2c dd       	rcall	.-1448   	; 0x7e0 <writeCV(unsigned int, unsigned char)>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1634
    writeCV (CV_MANUFACTURER_ID, ManufacturerId) ;
     d88:	6d e0       	ldi	r22, 0x0D	; 13
     d8a:	88 e0       	ldi	r24, 0x08	; 8
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	28 dd       	rcall	.-1456   	; 0x7e0 <writeCV(unsigned int, unsigned char)>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1636

    clearDccProcState (0);
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	02 df       	rcall	.-508    	; 0xb98 <clearDccProcState(unsigned char)>
begin():
     d94:	20 91 73 38 	lds	r18, 0x3873	; 0x803873 <pwm+0x4>
check_valid_digital_pin():
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:13
    Fmax = _Fmax ;
} 

void Weistra::begin()
{
    pinMode(trackPin, OUTPUT);
     d98:	82 2f       	mov	r24, r18
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/Arduino.h:814
#if !defined(NUM_TOTAL_PINS)
  #define NUM_TOTAL_PINS                (NUM_DIGITAL_PINS) /* Used the same way as NUM_DIGITAL_PINS. so it doesn't mean what it's named  - I didn't make the convention*/
#endif

inline __attribute__((always_inline)) void check_valid_digital_pin(pin_size_t pin) {
  if (__builtin_constant_p(pin)) {
     d9a:	90 e0       	ldi	r25, 0x00	; 0
pinMode():
     d9c:	22 31       	cpi	r18, 0x12	; 18
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring_digital.c:44
}

void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     d9e:	c8 f4       	brcc	.+50     	; 0xdd2 <main+0x10a>
     da0:	fc 01       	movw	r30, r24
     da2:	ec 58       	subi	r30, 0x8C	; 140
     da4:	fb 46       	sbci	r31, 0x6B	; 107
     da6:	20 81       	ld	r18, Z
     da8:	2f 3f       	cpi	r18, 0xFF	; 255
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring_digital.c:45
  if ((bit_mask == NOT_A_PIN) || (mode > INPUT_PULLUP)) {
     daa:	99 f0       	breq	.+38     	; 0xdd2 <main+0x10a>
     dac:	fc 01       	movw	r30, r24
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring_digital.c:48
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = (volatile uint8_t *) (uint16_t) ((&PORTA) + digitalPinToPort(pin));
     dae:	ea 57       	subi	r30, 0x7A	; 122
     db0:	fb 46       	sbci	r31, 0x6B	; 107
     db2:	e0 81       	ld	r30, Z
     db4:	b0 e2       	ldi	r27, 0x20	; 32
     db6:	eb 9f       	mul	r30, r27
     db8:	f0 01       	movw	r30, r0
     dba:	11 24       	eor	r1, r1
     dbc:	fc 5f       	subi	r31, 0xFC	; 252
     dbe:	21 83       	std	Z+1, r18	; 0x01
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring_digital.c:51
  if (mode & 0x01) {
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
     dc0:	88 56       	subi	r24, 0x68	; 104
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring_digital.c:77
  // then load with displacement 2 clocks. IFF the compiler puts this pointer into Y or Z, it is faster and smaller
  // by 2 bytes and one clock. And let's hope it is, because the code above would suck too if it was in X.
  // Handwritten assembly that exploited the knowledge that there will never be a carry would save 1 word and 1 clock.
  // and could probably save at least several times that in initializing the port_base pointer. But if you're using
  // pinMode you probably don't care.
  port_base += (uint8_t) digitalPinToBitPosition(pin);
     dc2:	9b 46       	sbci	r25, 0x6B	; 107
     dc4:	dc 01       	movw	r26, r24
     dc6:	8c 91       	ld	r24, X
     dc8:	e8 0f       	add	r30, r24
     dca:	f1 1d       	adc	r31, r1
     dcc:	80 89       	ldd	r24, Z+16	; 0x10
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring_digital.c:78
  bit_mask = *(port_base + 0x10);
     dce:	87 7f       	andi	r24, 0xF7	; 247
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring_digital.c:82
  if (mode & 2) {
    bit_mask |= 0x08;
  } else {
    bit_mask &= 0xF7;
     dd0:	80 8b       	std	Z+16, r24	; 0x10
begin():
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring_digital.c:84
  }
  *(port_base + 0x10) = bit_mask;
     dd2:	20 91 73 38 	lds	r18, 0x3873	; 0x803873 <pwm+0x4>
main():
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:15

    byte port   = digitalPinToPort( trackPin );
     dd6:	8f ef       	ldi	r24, 0xFF	; 255
     dd8:	9f ef       	ldi	r25, 0xFF	; 255
begin():
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:16
    trackPin    = digitalPinToBitMask( trackPin );
     dda:	22 31       	cpi	r18, 0x12	; 18
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:15

void Weistra::begin()
{
    pinMode(trackPin, OUTPUT);

    byte port   = digitalPinToPort( trackPin );
     ddc:	48 f4       	brcc	.+18     	; 0xdf0 <main+0x128>
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	f9 01       	movw	r30, r18
     de2:	ea 57       	subi	r30, 0x7A	; 122
     de4:	fb 46       	sbci	r31, 0x6B	; 107
     de6:	80 81       	ld	r24, Z
     de8:	2c 58       	subi	r18, 0x8C	; 140
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:16
    trackPin    = digitalPinToBitMask( trackPin );
     dea:	3b 46       	sbci	r19, 0x6B	; 107
     dec:	f9 01       	movw	r30, r18
     dee:	90 81       	ld	r25, Z
     df0:	90 93 73 38 	sts	0x3873, r25	; 0x803873 <pwm+0x4>
     df4:	83 30       	cpi	r24, 0x03	; 3
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:17
    portx_p     = portOutputRegister( port );
     df6:	08 f0       	brcs	.+2      	; 0xdfa <main+0x132>
     df8:	5c c0       	rjmp	.+184    	; 0xeb2 <main+0x1ea>
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	80 96       	adiw	r24, 0x20	; 32
     dfe:	25 e0       	ldi	r18, 0x05	; 5
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	2a 95       	dec	r18
     e06:	e1 f7       	brne	.-8      	; 0xe00 <main+0x138>
     e08:	04 96       	adiw	r24, 0x04	; 4
     e0a:	80 93 7e 38 	sts	0x387E, r24	; 0x80387e <pwm+0xf>
     e0e:	90 93 7f 38 	sts	0x387F, r25	; 0x80387f <pwm+0x10>
execDccProcessor():
     e12:	41 2c       	mov	r4, r1
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1374
                    {
                        if (DccProcState.Flags & FLAGS_OUTPUT_ADDRESS_MODE)
                        {
                            DB_PRINT ("eDP: Set OAddr:%d", OutputAddress);
                            //uint16_t storedOutputAddress = OutputAddress + 1; // The value stored in CV1 & 9 for Output Addressing Mode is + 1
                            writeCV (CV_ACCESSORY_DECODER_ADDRESS_LSB, (uint8_t) (OutputAddress % 256));
     e14:	55 24       	eor	r5, r5
     e16:	53 94       	inc	r5
     e18:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1377
                            writeCV (CV_ACCESSORY_DECODER_ADDRESS_MSB, (uint8_t) (OutputAddress / 256));

                            if (notifyDccAccOutputAddrSet)
     e1a:	6d 2e       	mov	r6, r29
     e1c:	d0 e0       	ldi	r29, 0x00	; 0
     e1e:	7d 2e       	mov	r7, r29
     e20:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1314
        #endif

            // Idle Packet
            if ( (pDccMsg->Data[0] == 0b11111111) && (pDccMsg->Data[1] == 0))
            {
                if (notifyDccIdle)
     e22:	a1 2e       	mov	r10, r17
     e24:	10 e0       	ldi	r17, 0x00	; 0
     e26:	b1 2e       	mov	r11, r17
ackCV():
     e28:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:779
    CLR_TP3;
}

void ackCV (void)
{
    if (notifyCVAck)
     e2a:	c0 2e       	mov	r12, r16
     e2c:	00 e0       	ldi	r16, 0x00	; 0
     e2e:	d0 2e       	mov	r13, r16
execDccProcessor():
     e30:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1272
///////////////////////////////////////////////////////////////////////////////
void execDccProcessor (DCC_MSG * pDccMsg)
{
    if ( (pDccMsg->Data[0] == 0) && (pDccMsg->Data[1] == 0))
    {
        if (notifyDccReset)
     e32:	88 2e       	mov	r8, r24
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	98 2e       	mov	r9, r24
process():
     e38:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <DccProcState+0x2>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1715
}

////////////////////////////////////////////////////////////////////////
uint8_t NmraDcc::process()
{
    if (DccProcState.inServiceMode)
     e3c:	88 23       	and	r24, r24
     e3e:	e9 f0       	breq	.+58     	; 0xe7a <main+0x1b2>
millis():
     e40:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:454
  unsigned long millis() {
    // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
    unsigned long m;
    // disable interrupts while we read timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to timer_millis)
    uint8_t oldSREG = SREG;
     e42:	f8 94       	cli
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:455
    cli();
     e44:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <timingStruct+0x2>
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:506
        "adc %D0, %D1"    "\n\t"
        : "+r" (m), "+r" (temp), "+d" (cnt)
        );
      */
    #else
      m = timingStruct.timer_millis;
     e48:	90 91 38 38 	lds	r25, 0x3838	; 0x803838 <timingStruct+0x3>
     e4c:	a0 91 39 38 	lds	r26, 0x3839	; 0x803839 <timingStruct+0x4>
     e50:	b0 91 3a 38 	lds	r27, 0x383A	; 0x80383a <timingStruct+0x5>
     e54:	2f bf       	out	0x3f, r18	; 63
process():
C:\Users\Gebruiker\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.8\cores\megatinycore/wiring.c:507
      SREG = oldSREG;
     e56:	40 91 58 38 	lds	r20, 0x3858	; 0x803858 <DccProcState+0x3>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1717
    {
        if ( (millis() - DccProcState.LastServiceModeMillis) > 20L)
     e5a:	50 91 59 38 	lds	r21, 0x3859	; 0x803859 <DccProcState+0x4>
     e5e:	60 91 5a 38 	lds	r22, 0x385A	; 0x80385a <DccProcState+0x5>
     e62:	70 91 5b 38 	lds	r23, 0x385B	; 0x80385b <DccProcState+0x6>
     e66:	84 1b       	sub	r24, r20
     e68:	95 0b       	sbc	r25, r21
     e6a:	a6 0b       	sbc	r26, r22
     e6c:	b7 0b       	sbc	r27, r23
     e6e:	45 97       	sbiw	r24, 0x15	; 21
     e70:	a1 05       	cpc	r26, r1
     e72:	b1 05       	cpc	r27, r1
     e74:	10 f0       	brcs	.+4      	; 0xe7a <main+0x1b2>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1719
        {
            clearDccProcState (0) ;
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	8f de       	rcall	.-738    	; 0xb98 <clearDccProcState(unsigned char)>
     e7a:	80 91 41 38 	lds	r24, 0x3841	; 0x803841 <DccRx+0x2>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1723
        }
    }

    if (DccRx.DataReady)
     e7e:	88 23       	and	r24, r24
     e80:	c9 f1       	breq	.+114    	; 0xef4 <main+0x22c>
     e82:	f8 94       	cli
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1729
    {
        // We need to do this check with interrupts disabled
        #ifdef ESP32
        portENTER_CRITICAL (&mux);
        #else
        noInterrupts();
     e84:	88 e0       	ldi	r24, 0x08	; 8
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1731
        #endif
        Msg = DccRx.PacketCopy ;
     e86:	ed e4       	ldi	r30, 0x4D	; 77
     e88:	f8 e3       	ldi	r31, 0x38	; 56
     e8a:	a0 e8       	ldi	r26, 0x80	; 128
     e8c:	b8 e3       	ldi	r27, 0x38	; 56
     e8e:	01 90       	ld	r0, Z+
     e90:	0d 92       	st	X+, r0
     e92:	8a 95       	dec	r24
     e94:	e1 f7       	brne	.-8      	; 0xe8e <main+0x1c6>
     e96:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <DccRx+0x2>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1732
        DccRx.DataReady = 0 ;
     e9a:	78 94       	sei
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1737

        #ifdef ESP32
        portEXIT_CRITICAL (&mux);
        #else
        interrupts();
     e9c:	80 91 80 38 	lds	r24, 0x3880	; 0x803880 <dcc>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1744
        // Checking of the XOR-byte is now done in the ISR already
        #ifdef DCC_DBGVAR
        countOf.Tel++;
        #endif
        // Clear trailing bytes
        for (byte i=Msg.Size; i< MAX_DCC_MESSAGE_LEN; i++) Msg.Data[i] = 0;
     ea0:	e8 2f       	mov	r30, r24
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	ee 57       	subi	r30, 0x7E	; 126
     ea6:	f7 4c       	sbci	r31, 0xC7	; 199
     ea8:	86 30       	cpi	r24, 0x06	; 6
     eaa:	30 f4       	brcc	.+12     	; 0xeb8 <main+0x1f0>
     eac:	11 92       	st	Z+, r1
     eae:	8f 5f       	subi	r24, 0xFF	; 255
     eb0:	fb cf       	rjmp	.-10     	; 0xea8 <main+0x1e0>
main():
     eb2:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:17
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	a8 cf       	rjmp	.-176    	; 0xe08 <main+0x140>
process():
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1746

        if (notifyDccMsg) 	notifyDccMsg (&Msg);
     eba:	eb 2e       	mov	r14, r27
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	fb 2e       	mov	r15, r27
     ec0:	ef 28       	or	r14, r15
     ec2:	21 f0       	breq	.+8      	; 0xecc <main+0x204>
     ec4:	80 e8       	ldi	r24, 0x80	; 128
     ec6:	98 e3       	ldi	r25, 0x38	; 56
     ec8:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
execDccProcessor():
     ecc:	80 91 82 38 	lds	r24, 0x3882	; 0x803882 <dcc+0x2>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1270
#endif

///////////////////////////////////////////////////////////////////////////////
void execDccProcessor (DCC_MSG * pDccMsg)
{
    if ( (pDccMsg->Data[0] == 0) && (pDccMsg->Data[1] == 0))
     ed0:	81 11       	cpse	r24, r1
     ed2:	78 c0       	rjmp	.+240    	; 0xfc4 <main+0x2fc>
     ed4:	90 91 83 38 	lds	r25, 0x3883	; 0x803883 <dcc+0x3>
     ed8:	91 11       	cpse	r25, r1
     eda:	74 c0       	rjmp	.+232    	; 0xfc4 <main+0x2fc>
     edc:	81 14       	cp	r8, r1
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1272
    {
        if (notifyDccReset)
     ede:	91 04       	cpc	r9, r1
     ee0:	11 f0       	breq	.+4      	; 0xee6 <main+0x21e>
     ee2:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1277
            notifyDccReset (0) ;

        #ifdef NMRA_DCC_PROCESS_SERVICEMODE
        // If this is the first Reset then perform some one-shot actions as we maybe about to enter service mode
        if (DccProcState.inServiceMode)
     ee6:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <DccProcState+0x2>
     eea:	88 23       	and	r24, r24
     eec:	09 f4       	brne	.+2      	; 0xef0 <main+0x228>
     eee:	67 c0       	rjmp	.+206    	; 0xfbe <main+0x2f6>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1278
            resetServiceModeTimer (1) ;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	33 dc       	rcall	.-1946   	; 0x75a <resetServiceModeTimer(unsigned char)>
update():
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:22
}

void Weistra::update() 
{
    if( portx_p != 0 )
     ef4:	80 91 7e 38 	lds	r24, 0x387E	; 0x80387e <pwm+0xf>
     ef8:	90 91 7f 38 	lds	r25, 0x387F	; 0x80387f <pwm+0x10>
     efc:	89 2b       	or	r24, r25
     efe:	09 f4       	brne	.+2      	; 0xf02 <main+0x23a>
     f00:	9b cf       	rjmp	.-202    	; 0xe38 <main+0x170>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:24
    {
        uint32_t currentTime = micros() ; 
     f02:	34 da       	rcall	.-2968   	; 0x36c <micros>
     f04:	00 91 7a 38 	lds	r16, 0x387A	; 0x80387a <pwm+0xb>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:26

        if( currentTime - prevTime >= intervalTime )
     f08:	10 91 7b 38 	lds	r17, 0x387B	; 0x80387b <pwm+0xc>
     f0c:	20 91 7c 38 	lds	r18, 0x387C	; 0x80387c <pwm+0xd>
     f10:	30 91 7d 38 	lds	r19, 0x387D	; 0x80387d <pwm+0xe>
     f14:	6b 01       	movw	r12, r22
     f16:	7c 01       	movw	r14, r24
     f18:	c0 1a       	sub	r12, r16
     f1a:	d1 0a       	sbc	r13, r17
     f1c:	e2 0a       	sbc	r14, r18
     f1e:	f3 0a       	sbc	r15, r19
     f20:	97 01       	movw	r18, r14
     f22:	86 01       	movw	r16, r12
     f24:	40 91 6f 38 	lds	r20, 0x386F	; 0x80386f <pwm>
     f28:	50 91 70 38 	lds	r21, 0x3870	; 0x803870 <pwm+0x1>
     f2c:	6a 01       	movw	r12, r20
     f2e:	f1 2c       	mov	r15, r1
     f30:	e1 2c       	mov	r14, r1
     f32:	0c 15       	cp	r16, r12
     f34:	1d 05       	cpc	r17, r13
     f36:	2e 05       	cpc	r18, r14
     f38:	3f 05       	cpc	r19, r15
     f3a:	08 f4       	brcc	.+2      	; 0xf3e <main+0x276>
     f3c:	6a cf       	rjmp	.-300    	; 0xe12 <main+0x14a>
     f3e:	60 93 7a 38 	sts	0x387A, r22	; 0x80387a <pwm+0xb>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:28
        { 
            prevTime = currentTime;
     f42:	70 93 7b 38 	sts	0x387B, r23	; 0x80387b <pwm+0xc>
     f46:	80 93 7c 38 	sts	0x387C, r24	; 0x80387c <pwm+0xd>
     f4a:	90 93 7d 38 	sts	0x387D, r25	; 0x80387d <pwm+0xe>
     f4e:	80 91 79 38 	lds	r24, 0x3879	; 0x803879 <pwm+0xa>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:30

            if( counter == 0 && newDutyCycle > 0 )      // if counter reaches 100, reset it to 0 and enable the track power pin
     f52:	81 11       	cpse	r24, r1
     f54:	19 c0       	rjmp	.+50     	; 0xf88 <main+0x2c0>
     f56:	80 91 75 38 	lds	r24, 0x3875	; 0x803875 <pwm+0x6>
     f5a:	88 23       	and	r24, r24
     f5c:	a9 f0       	breq	.+42     	; 0xf88 <main+0x2c0>
     f5e:	e0 91 7e 38 	lds	r30, 0x387E	; 0x80387e <pwm+0xf>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:32
            {
                *portx_p |=  trackPin ;
     f62:	f0 91 7f 38 	lds	r31, 0x387F	; 0x80387f <pwm+0x10>
     f66:	80 81       	ld	r24, Z
     f68:	90 91 73 38 	lds	r25, 0x3873	; 0x803873 <pwm+0x4>
     f6c:	89 2b       	or	r24, r25
     f6e:	80 83       	st	Z, r24
     f70:	80 91 75 38 	lds	r24, 0x3875	; 0x803875 <pwm+0x6>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:33
                dutyCycle = newDutyCycle ;              // a new dutycucle can only be accepted on the beginning of a cycle, this prevents weird jumps of the trains
     f74:	80 93 74 38 	sts	0x3874, r24	; 0x803874 <pwm+0x5>
     f78:	80 91 71 38 	lds	r24, 0x3871	; 0x803871 <pwm+0x2>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:34
                intervalTime = newIntervalTime ;        // new speed is accepted at the beginning of a cycle
     f7c:	90 91 72 38 	lds	r25, 0x3872	; 0x803872 <pwm+0x3>
     f80:	80 93 6f 38 	sts	0x386F, r24	; 0x80386f <pwm>
     f84:	90 93 70 38 	sts	0x3870, r25	; 0x803870 <pwm+0x1>
     f88:	90 91 79 38 	lds	r25, 0x3879	; 0x803879 <pwm+0xa>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:36
            }
            if( counter == dutyCycle /*&& dutyCycle < 100*/ ) // commented code seems buggy??
     f8c:	80 91 74 38 	lds	r24, 0x3874	; 0x803874 <pwm+0x5>
     f90:	98 13       	cpse	r25, r24
     f92:	0a c0       	rjmp	.+20     	; 0xfa8 <main+0x2e0>
     f94:	e0 91 7e 38 	lds	r30, 0x387E	; 0x80387e <pwm+0xf>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:38
            {
                *portx_p &= ~trackPin;
     f98:	f0 91 7f 38 	lds	r31, 0x387F	; 0x80387f <pwm+0x10>
     f9c:	90 81       	ld	r25, Z
     f9e:	80 91 73 38 	lds	r24, 0x3873	; 0x803873 <pwm+0x4>
     fa2:	80 95       	com	r24
     fa4:	89 23       	and	r24, r25
     fa6:	80 83       	st	Z, r24
     fa8:	80 91 79 38 	lds	r24, 0x3879	; 0x803879 <pwm+0xa>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:40
            }
            if( ++counter > 100) counter = 0 ;
     fac:	8f 5f       	subi	r24, 0xFF	; 255
     fae:	80 93 79 38 	sts	0x3879, r24	; 0x803879 <pwm+0xa>
     fb2:	85 36       	cpi	r24, 0x65	; 101
     fb4:	08 f4       	brcc	.+2      	; 0xfb8 <main+0x2f0>
     fb6:	2d cf       	rjmp	.-422    	; 0xe12 <main+0x14a>
     fb8:	10 92 79 38 	sts	0x3879, r1	; 0x803879 <pwm+0xa>
     fbc:	2a cf       	rjmp	.-428    	; 0xe12 <main+0x14a>
execDccProcessor():
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1280
        else
            clearDccProcState (1);
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	eb dd       	rcall	.-1066   	; 0xb98 <clearDccProcState(unsigned char)>
     fc2:	98 cf       	rjmp	.-208    	; 0xef4 <main+0x22c>
     fc4:	90 91 57 38 	lds	r25, 0x3857	; 0x803857 <DccProcState+0x2>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1287
    }

    else
    {
        #ifdef NMRA_DCC_PROCESS_SERVICEMODE
        if (DccProcState.inServiceMode && (pDccMsg->Data[0] >= 112) && (pDccMsg->Data[0] < 128))
     fc8:	99 23       	and	r25, r25
     fca:	09 f4       	brne	.+2      	; 0xfce <main+0x306>
     fcc:	7f c0       	rjmp	.+254    	; 0x10cc <main+0x404>
     fce:	80 57       	subi	r24, 0x70	; 112
     fd0:	80 31       	cpi	r24, 0x10	; 16
     fd2:	08 f0       	brcs	.+2      	; 0xfd6 <main+0x30e>
     fd4:	79 c0       	rjmp	.+242    	; 0x10c8 <main+0x400>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1289
        {
            resetServiceModeTimer (1) ;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	c0 db       	rcall	.-2176   	; 0x75a <resetServiceModeTimer(unsigned char)>
     fda:	c0 91 80 38 	lds	r28, 0x3880	; 0x803880 <dcc>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1292

            //Only check the DCC Packet "Size" and "Data" fields and ignore the "PreambleBits" as they can be different to the previous packet
            if (pDccMsg->Size != DccProcState.LastMsg.Size || memcmp (pDccMsg->Data, &DccProcState.LastMsg.Data, pDccMsg->Size) != 0)
     fde:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <DccProcState+0x9>
     fe2:	c8 13       	cpse	r28, r24
     fe4:	09 c0       	rjmp	.+18     	; 0xff8 <main+0x330>
     fe6:	4c 2f       	mov	r20, r28
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	60 e6       	ldi	r22, 0x60	; 96
     fec:	78 e3       	ldi	r23, 0x38	; 56
     fee:	82 e8       	ldi	r24, 0x82	; 130
     ff0:	98 e3       	ldi	r25, 0x38	; 56
     ff2:	31 d2       	rcall	.+1122   	; 0x1456 <memcmp>
     ff4:	89 2b       	or	r24, r25
     ff6:	61 f0       	breq	.+24     	; 0x1010 <main+0x348>
     ff8:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <DccProcState+0x8>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1294
            {
                DccProcState.DuplicateCount = 0 ;
     ffc:	88 e0       	ldi	r24, 0x08	; 8
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1295
                memcpy (&DccProcState.LastMsg, pDccMsg, sizeof (DCC_MSG)) ;
     ffe:	e0 e8       	ldi	r30, 0x80	; 128
    1000:	f8 e3       	ldi	r31, 0x38	; 56
    1002:	ae e5       	ldi	r26, 0x5E	; 94
    1004:	b8 e3       	ldi	r27, 0x38	; 56
    1006:	01 90       	ld	r0, Z+
    1008:	0d 92       	st	X+, r0
    100a:	8a 95       	dec	r24
    100c:	e1 f7       	brne	.-8      	; 0x1006 <main+0x33e>
    100e:	72 cf       	rjmp	.-284    	; 0xef4 <main+0x22c>
    1010:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <DccProcState+0x8>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1300
            }
            // Wait until you see 2 identical packets before acting on a Service Mode Packet
            else
            {
                DccProcState.DuplicateCount++ ;
    1014:	8f 5f       	subi	r24, 0xFF	; 255
    1016:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <DccProcState+0x8>
processServiceModeOperation():
    101a:	c3 30       	cpi	r28, 0x03	; 3
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1164
#ifdef NMRA_DCC_PROCESS_SERVICEMODE
void processServiceModeOperation (DCC_MSG * pDccMsg)
{
    uint16_t CVAddr ;
    uint8_t Value ;
    if (pDccMsg->Size == 3) // 3 Byte Packets are for Address Only, Register and Paged Mode
    101c:	09 f0       	breq	.+2      	; 0x1020 <main+0x358>
    101e:	3d c0       	rjmp	.+122    	; 0x109a <main+0x3d2>
    1020:	20 91 82 38 	lds	r18, 0x3882	; 0x803882 <dcc+0x2>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1168
    {
        uint8_t RegisterAddr ;
        DB_PRINT ("CV Address, Register & Paged Mode Operation");
        RegisterAddr = pDccMsg->Data[0] & 0x07 ;
    1024:	82 2f       	mov	r24, r18
    1026:	87 70       	andi	r24, 0x07	; 7
    1028:	10 91 83 38 	lds	r17, 0x3883	; 0x803883 <dcc+0x3>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1169
        Value = pDccMsg->Data[1] ;
    102c:	85 30       	cpi	r24, 0x05	; 5
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1171

        if (RegisterAddr == 5)
    102e:	49 f4       	brne	.+18     	; 0x1042 <main+0x37a>
    1030:	10 93 5c 38 	sts	0x385C, r17	; 0x80385c <DccProcState+0x7>
ackCV():
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1173
        {
            DccProcState.PageRegister = Value ;
    1034:	c1 14       	cp	r12, r1
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:779
    CLR_TP3;
}

void ackCV (void)
{
    if (notifyCVAck)
    1036:	d1 04       	cpc	r13, r1
    1038:	09 f4       	brne	.+2      	; 0x103c <main+0x374>
    103a:	5c cf       	rjmp	.-328    	; 0xef4 <main+0x22c>
    103c:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:782
    {
        DB_PRINT ("ackCV: Send Basic ACK");
        notifyCVAck() ;
    1040:	59 cf       	rjmp	.-334    	; 0xef4 <main+0x22c>
main():
    1042:	cd e1       	ldi	r28, 0x1D	; 29
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1180
        }

        else
        {
            if (RegisterAddr == 4)
                CVAddr = CV_29_CONFIG ;
    1044:	d0 e0       	ldi	r29, 0x00	; 0
processServiceModeOperation():
    1046:	84 30       	cpi	r24, 0x04	; 4
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1179
            ackCV();
        }

        else
        {
            if (RegisterAddr == 4)
    1048:	89 f0       	breq	.+34     	; 0x106c <main+0x3a4>
    104a:	c8 2f       	mov	r28, r24
    104c:	d0 e0       	ldi	r29, 0x00	; 0
    104e:	84 30       	cpi	r24, 0x04	; 4
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1182
                CVAddr = CV_29_CONFIG ;

            else if ( (RegisterAddr <= 3) && (DccProcState.PageRegister > 0))
    1050:	60 f4       	brcc	.+24     	; 0x106a <main+0x3a2>
    1052:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <DccProcState+0x7>
    1056:	88 23       	and	r24, r24
    1058:	41 f0       	breq	.+16     	; 0x106a <main+0x3a2>
    105a:	81 50       	subi	r24, 0x01	; 1
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1183
                CVAddr = ( (DccProcState.PageRegister - 1) * 4) + RegisterAddr + 1 ;
    105c:	99 0b       	sbc	r25, r25
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	c8 0f       	add	r28, r24
    1068:	d9 1f       	adc	r29, r25
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1186

            else
                CVAddr = RegisterAddr + 1 ;
    106a:	21 96       	adiw	r28, 0x01	; 1
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1188

            if (pDccMsg->Data[0] & 0x08)  // Perform the Write Operation
    106c:	23 ff       	sbrs	r18, 3
    106e:	0c c0       	rjmp	.+24     	; 0x1088 <main+0x3c0>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1190
            {
                if (validCV (CVAddr, 1))
    1070:	61 e0       	ldi	r22, 0x01	; 1
    1072:	ce 01       	movw	r24, r28
    1074:	6e dc       	rcall	.-1828   	; 0x952 <validCV(unsigned int, unsigned char)>
    1076:	88 23       	and	r24, r24
    1078:	09 f4       	brne	.+2      	; 0x107c <main+0x3b4>
    107a:	3c cf       	rjmp	.-392    	; 0xef4 <main+0x22c>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1192
                {
                    if (writeCV (CVAddr, Value) == Value)
    107c:	61 2f       	mov	r22, r17
    107e:	ce 01       	movw	r24, r28
    1080:	af db       	rcall	.-2210   	; 0x7e0 <writeCV(unsigned int, unsigned char)>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1201

            else  // Perform the Verify Operation
            {
                if (validCV (CVAddr, 0))
                {
                    if (readCV (CVAddr) == Value)
    1082:	18 13       	cpse	r17, r24
    1084:	37 cf       	rjmp	.-402    	; 0xef4 <main+0x22c>
    1086:	d6 cf       	rjmp	.-84     	; 0x1034 <main+0x36c>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1199
                }
            }

            else  // Perform the Verify Operation
            {
                if (validCV (CVAddr, 0))
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	ce 01       	movw	r24, r28
    108c:	62 dc       	rcall	.-1852   	; 0x952 <validCV(unsigned int, unsigned char)>
    108e:	88 23       	and	r24, r24
    1090:	09 f4       	brne	.+2      	; 0x1094 <main+0x3cc>
    1092:	30 cf       	rjmp	.-416    	; 0xef4 <main+0x22c>
    1094:	ce 01       	movw	r24, r28
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1201
                {
                    if (readCV (CVAddr) == Value)
    1096:	09 dc       	rcall	.-2030   	; 0x8aa <readCV(unsigned int)>
    1098:	f4 cf       	rjmp	.-24     	; 0x1082 <main+0x3ba>
    109a:	c4 30       	cpi	r28, 0x04	; 4
    109c:	09 f0       	breq	.+2      	; 0x10a0 <main+0x3d8>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1208
                }
            }
        }
    }

    else if (pDccMsg->Size == 4) // 4 Byte Packets are for Direct Byte & Bit Mode
    109e:	2a cf       	rjmp	.-428    	; 0xef4 <main+0x22c>
    10a0:	80 91 82 38 	lds	r24, 0x3882	; 0x803882 <dcc+0x2>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1211
    {
        DB_PRINT ("CV Direct Byte and Bit Mode Mode Operation");
        CVAddr = ( ( (pDccMsg->Data[0] & 0x03) << 8) | pDccMsg->Data[1]) + 1 ;
    10a4:	68 2f       	mov	r22, r24
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	76 2f       	mov	r23, r22
    10aa:	66 27       	eor	r22, r22
    10ac:	66 27       	eor	r22, r22
    10ae:	73 70       	andi	r23, 0x03	; 3
    10b0:	90 91 83 38 	lds	r25, 0x3883	; 0x803883 <dcc+0x3>
    10b4:	69 2b       	or	r22, r25
    10b6:	6f 5f       	subi	r22, 0xFF	; 255
    10b8:	7f 4f       	sbci	r23, 0xFF	; 255
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1214
        Value = pDccMsg->Data[2] ;

        processDirectCVOperation (pDccMsg->Data[0] & 0b00001100, CVAddr, Value, ackCV) ;
    10ba:	2f ea       	ldi	r18, 0xAF	; 175
    10bc:	31 e0       	ldi	r19, 0x01	; 1
    10be:	40 91 84 38 	lds	r20, 0x3884	; 0x803884 <dcc+0x4>
    10c2:	8c 70       	andi	r24, 0x0C	; 12
    10c4:	7d dc       	rcall	.-1798   	; 0x9c0 <processDirectCVOperation(unsigned char, unsigned int, unsigned char, void (*)())>
    10c6:	16 cf       	rjmp	.-468    	; 0xef4 <main+0x22c>
execDccProcessor():
    10c8:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1308
        }

        else
        {
            if (DccProcState.inServiceMode)
                clearDccProcState (0);
    10ca:	66 dd       	rcall	.-1332   	; 0xb98 <clearDccProcState(unsigned char)>
    10cc:	e0 91 82 38 	lds	r30, 0x3882	; 0x803882 <dcc+0x2>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1312
        #endif

            // Idle Packet
            if ( (pDccMsg->Data[0] == 0b11111111) && (pDccMsg->Data[1] == 0))
    10d0:	ef 3f       	cpi	r30, 0xFF	; 255
    10d2:	59 f4       	brne	.+22     	; 0x10ea <main+0x422>
    10d4:	80 91 83 38 	lds	r24, 0x3883	; 0x803883 <dcc+0x3>
    10d8:	81 11       	cpse	r24, r1
    10da:	0c cf       	rjmp	.-488    	; 0xef4 <main+0x22c>
    10dc:	a1 14       	cp	r10, r1
    10de:	b1 04       	cpc	r11, r1
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1314
            {
                if (notifyDccIdle)
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <main+0x41c>
    10e2:	08 cf       	rjmp	.-496    	; 0xef4 <main+0x22c>
    10e4:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1315
                    notifyDccIdle() ;
    10e8:	05 cf       	rjmp	.-502    	; 0xef4 <main+0x22c>
    10ea:	e7 fd       	sbrc	r30, 7
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1320
            }

            #ifdef NMRA_DCC_PROCESS_MULTIFUNCTION
            // Multi Function Decoders (7-bit address)
            else if (pDccMsg->Data[0] < 128)
    10ec:	0c c0       	rjmp	.+24     	; 0x1106 <main+0x43e>
    10ee:	00 91 85 38 	lds	r16, 0x3885	; 0x803885 <dcc+0x5>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1321
                processMultiFunctionMessage (pDccMsg->Data[0], DCC_ADDR_SHORT, pDccMsg->Data[1], pDccMsg->Data[2], pDccMsg->Data[3]) ;
    10f2:	20 91 84 38 	lds	r18, 0x3884	; 0x803884 <dcc+0x4>
    10f6:	40 91 83 38 	lds	r20, 0x3883	; 0x803883 <dcc+0x3>
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	8e 2f       	mov	r24, r30
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	c4 dc       	rcall	.-1656   	; 0xa8c <processMultiFunctionMessage(unsigned int, DCC_ADDR_TYPE, unsigned char, unsigned char, unsigned char)>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1532
            else if (pDccMsg->Data[0] < 232)
            {
                uint16_t Address ;
                Address = ( (pDccMsg->Data[0] - 192) << 8) | pDccMsg->Data[1];
                //TODO should we convert Address to 1 .. 10239 ?
                processMultiFunctionMessage (Address, DCC_ADDR_LONG, pDccMsg->Data[2], pDccMsg->Data[3], pDccMsg->Data[4]) ;
    1104:	f7 ce       	rjmp	.-530    	; 0xef4 <main+0x22c>
    1106:	e0 3c       	cpi	r30, 0xC0	; 192
    1108:	08 f0       	brcs	.+2      	; 0x110c <main+0x444>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1324
            // Multi Function Decoders (7-bit address)
            else if (pDccMsg->Data[0] < 128)
                processMultiFunctionMessage (pDccMsg->Data[0], DCC_ADDR_SHORT, pDccMsg->Data[1], pDccMsg->Data[2], pDccMsg->Data[3]) ;

            // Basic Accessory Decoders (9-bit) & Extended Accessory Decoders (11-bit)
            else if (pDccMsg->Data[0] < 192)
    110a:	40 c1       	rjmp	.+640    	; 0x138c <main+0x6c4>
    110c:	90 91 55 38 	lds	r25, 0x3855	; 0x803855 <DccProcState>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1329
            #else
            else if ( (pDccMsg->Data[0] >= 128) && (pDccMsg->Data[0] < 192))
            #endif
            {
                if (DccProcState.Flags & FLAGS_DCC_ACCESSORY_DECODER)
    1110:	97 ff       	sbrs	r25, 7
    1112:	f0 ce       	rjmp	.-544    	; 0xef4 <main+0x22c>
    1114:	40 91 83 38 	lds	r20, 0x3883	; 0x803883 <dcc+0x3>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1339

                    #ifdef DEBUG_PRINT
                    SerialPrintPacketHex (F ("eDP: AccCmd: "), pDccMsg);
                    #endif

                    BoardAddress = ( ( (~pDccMsg->Data[1]) & 0b01110000) << 2) | (pDccMsg->Data[0] & 0b00111111) ;
    1118:	24 2f       	mov	r18, r20
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	e9 01       	movw	r28, r18
    111e:	c0 95       	com	r28
    1120:	d0 95       	com	r29
    1122:	cc 0f       	add	r28, r28
    1124:	dd 1f       	adc	r29, r29
    1126:	cc 0f       	add	r28, r28
    1128:	dd 1f       	adc	r29, r29
    112a:	c0 7c       	andi	r28, 0xC0	; 192
    112c:	d1 70       	andi	r29, 0x01	; 1
    112e:	ef 73       	andi	r30, 0x3F	; 63
    1130:	ce 2b       	or	r28, r30
    1132:	35 95       	asr	r19
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1340
                    TurnoutPairIndex = (pDccMsg->Data[1] & 0b00000110) >> 1;
    1134:	27 95       	ror	r18
    1136:	82 2f       	mov	r24, r18
    1138:	83 70       	andi	r24, 0x03	; 3
    113a:	38 2e       	mov	r3, r24
    113c:	80 91 80 38 	lds	r24, 0x3880	; 0x803880 <dcc>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1345
                    DB_PRINT ("eDP: BAddr:%d, Index:%d", BoardAddress, TurnoutPairIndex);

                    // First check for Legacy Accessory Decoder Configuration Variable Access Instruction
                    // as it's got a different format to the others
                    if ( (pDccMsg->Size == 5) && ( (pDccMsg->Data[1] & 0b10001100) == 0b00001100))
    1140:	85 30       	cpi	r24, 0x05	; 5
    1142:	19 f5       	brne	.+70     	; 0x118a <main+0x4c2>
    1144:	4c 78       	andi	r20, 0x8C	; 140
    1146:	4c 30       	cpi	r20, 0x0C	; 12
    1148:	01 f5       	brne	.+64     	; 0x118a <main+0x4c2>
    114a:	ba db       	rcall	.-2188   	; 0x8c0 <getMyAddr()>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1349
                    {
                        DB_PRINT ("eDP: Legacy Accessory Decoder CV Access Command");
                        // Check if this command is for our address or the broadcast address
                        if ( (BoardAddress != getMyAddr()) && (BoardAddress < 511))
    114c:	8c 17       	cp	r24, r28
    114e:	9d 07       	cpc	r25, r29
    1150:	21 f0       	breq	.+8      	; 0x115a <main+0x492>
    1152:	cf 3f       	cpi	r28, 0xFF	; 255
    1154:	d1 40       	sbci	r29, 0x01	; 1
    1156:	09 f0       	breq	.+2      	; 0x115a <main+0x492>
    1158:	cd ce       	rjmp	.-614    	; 0xef4 <main+0x22c>
    115a:	c0 91 83 38 	lds	r28, 0x3883	; 0x803883 <dcc+0x3>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1355
                        {
                            DB_PRINT ("eDP: Board Address Not Matched");
                            return;
                        }

                        uint16_t cvAddress = ( (pDccMsg->Data[1] & 0b00000011) << 8) + pDccMsg->Data[2] + 1;
    115e:	d0 e0       	ldi	r29, 0x00	; 0
    1160:	dc 2f       	mov	r29, r28
    1162:	cc 27       	eor	r28, r28
    1164:	cc 27       	eor	r28, r28
    1166:	d3 70       	andi	r29, 0x03	; 3
    1168:	80 91 84 38 	lds	r24, 0x3884	; 0x803884 <dcc+0x4>
    116c:	c8 0f       	add	r28, r24
    116e:	d1 1d       	adc	r29, r1
    1170:	21 96       	adiw	r28, 0x01	; 1
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1356
                        uint8_t  cvValue   = pDccMsg->Data[3];
    1172:	10 91 85 38 	lds	r17, 0x3885	; 0x803885 <dcc+0x5>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1498
                            DB_PRINT ("eDP: Unsupported OPS Mode Instruction:%d", insType);
                            break; // We only support Write Byte or Bit Manipulation

                        case OPS_INS_WRITE_BYTE:
                            DB_PRINT ("eDP: CV:%d Value:%d", cvAddress, cvValue);
                            if (validCV (cvAddress, 1))
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	ce 01       	movw	r24, r28
    117a:	eb db       	rcall	.-2090   	; 0x952 <validCV(unsigned int, unsigned char)>
    117c:	61 2f       	mov	r22, r17
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1499
                                writeCV (cvAddress, cvValue);
    117e:	88 23       	and	r24, r24
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1498
                            DB_PRINT ("eDP: Unsupported OPS Mode Instruction:%d", insType);
                            break; // We only support Write Byte or Bit Manipulation

                        case OPS_INS_WRITE_BYTE:
                            DB_PRINT ("eDP: CV:%d Value:%d", cvAddress, cvValue);
                            if (validCV (cvAddress, 1))
    1180:	09 f4       	brne	.+2      	; 0x1184 <main+0x4bc>
    1182:	b8 ce       	rjmp	.-656    	; 0xef4 <main+0x22c>
    1184:	ce 01       	movw	r24, r28
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1517
                                uint8_t currentValue = readCV (cvAddress);
                                uint8_t newValueMask = 1 << (cvValue & 0b00000111);
                                if (cvValue & 0b00001000)
                                    writeCV (cvAddress, currentValue | newValueMask);
                                else
                                    writeCV (cvAddress, currentValue & ~newValueMask);
    1186:	2c db       	rcall	.-2472   	; 0x7e0 <writeCV(unsigned int, unsigned char)>
    1188:	b5 ce       	rjmp	.-662    	; 0xef4 <main+0x22c>
    118a:	7e 01       	movw	r14, r28
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1364
                            writeCV (cvAddress, cvValue);
                        return;
                    }


                    OutputAddress = ( ( (BoardAddress - 1) << 2) | TurnoutPairIndex) + 1 ; //decoder output addresses start with 1, packet address range starts with 0
    118c:	a1 e0       	ldi	r26, 0x01	; 1
    118e:	ea 1a       	sub	r14, r26
    1190:	f1 08       	sbc	r15, r1
    1192:	ee 0c       	add	r14, r14
    1194:	ff 1c       	adc	r15, r15
    1196:	ee 0c       	add	r14, r14
    1198:	ff 1c       	adc	r15, r15
    119a:	e3 28       	or	r14, r3
    119c:	87 01       	movw	r16, r14
    119e:	0f 5f       	subi	r16, 0xFF	; 255
    11a0:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1368
                    // ( according to NMRA 9.2.2 )
                    DB_PRINT ("eDP: OAddr:%d", OutputAddress);

                    if (DccProcState.inAccDecDCCAddrNextReceivedMode)
    11a2:	80 91 6d 38 	lds	r24, 0x386D	; 0x80386d <DccProcState+0x18>
    11a6:	88 23       	and	r24, r24
    11a8:	d1 f0       	breq	.+52     	; 0x11de <main+0x516>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1370
                    {
                        if (DccProcState.Flags & FLAGS_OUTPUT_ADDRESS_MODE)
    11aa:	96 ff       	sbrs	r25, 6
    11ac:	3c c0       	rjmp	.+120    	; 0x1226 <main+0x55e>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1374
                        {
                            DB_PRINT ("eDP: Set OAddr:%d", OutputAddress);
                            //uint16_t storedOutputAddress = OutputAddress + 1; // The value stored in CV1 & 9 for Output Addressing Mode is + 1
                            writeCV (CV_ACCESSORY_DECODER_ADDRESS_LSB, (uint8_t) (OutputAddress % 256));
    11ae:	c8 01       	movw	r24, r16
    11b0:	b2 01       	movw	r22, r4
    11b2:	0b d1       	rcall	.+534    	; 0x13ca <__divmodhi4>
    11b4:	68 2f       	mov	r22, r24
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	12 db       	rcall	.-2524   	; 0x7e0 <writeCV(unsigned int, unsigned char)>
    11bc:	c8 01       	movw	r24, r16
    11be:	17 ff       	sbrs	r17, 7
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1375
                            writeCV (CV_ACCESSORY_DECODER_ADDRESS_MSB, (uint8_t) (OutputAddress / 256));
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <main+0x4fe>
    11c2:	81 50       	subi	r24, 0x01	; 1
    11c4:	9f 4f       	sbci	r25, 0xFF	; 255
    11c6:	69 2f       	mov	r22, r25
    11c8:	89 e0       	ldi	r24, 0x09	; 9
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	09 db       	rcall	.-2542   	; 0x7e0 <writeCV(unsigned int, unsigned char)>
    11ce:	61 14       	cp	r6, r1
    11d0:	71 04       	cpc	r7, r1
    11d2:	19 f0       	breq	.+6      	; 0x11da <main+0x512>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1377

                            if (notifyDccAccOutputAddrSet)
    11d4:	c8 01       	movw	r24, r16
    11d6:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1378
                                notifyDccAccOutputAddrSet (OutputAddress);
    11da:	10 92 6d 38 	sts	0x386D, r1	; 0x80386d <DccProcState+0x18>
    11de:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <DccProcState>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1390

                            if (notifyDccAccBoardAddrSet)
                                notifyDccAccBoardAddrSet (BoardAddress);
                        }

                        DccProcState.inAccDecDCCAddrNextReceivedMode = 0; // Reset the mode now that we have set the address
    11e2:	80 fd       	sbrc	r24, 0
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1394
                    }

                    // If we're filtering addresses, does the address match our address or is it a broadcast address? If NOT then return
                    if (DccProcState.Flags & FLAGS_MY_ADDRESS_ONLY)
    11e4:	37 c0       	rjmp	.+110    	; 0x1254 <main+0x58c>
    11e6:	80 91 80 38 	lds	r24, 0x3880	; 0x803880 <dcc>
    11ea:	84 30       	cpi	r24, 0x04	; 4
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1417
                        }
                        DB_PRINT ("eDP: Address Matched");
                    }


                    if ( (pDccMsg->Size == 4) && ( (pDccMsg->Data[1] & 0b10001001) == 1))	// Extended Accessory Decoder Control Packet Format
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <main+0x528>
    11ee:	4a c0       	rjmp	.+148    	; 0x1284 <main+0x5bc>
    11f0:	80 91 83 38 	lds	r24, 0x3883	; 0x803883 <dcc+0x3>
    11f4:	89 78       	andi	r24, 0x89	; 137
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	09 f0       	breq	.+2      	; 0x11fc <main+0x534>
    11fa:	7c ce       	rjmp	.-776    	; 0xef4 <main+0x22c>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	89 2b       	or	r24, r25
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1423
                    {
                        // According to the NMRA Dcc Spec the Signal State should only use the lower 5 Bits,
                        // however some manufacturers seem to allow/use all 8 bits, so we'll relax that constraint for now
                        uint8_t state = pDccMsg->Data[2] ;
                        DB_PRINT ("eDP: OAddr:%d  Extended State:%0X", OutputAddress, state);
                        if (notifyDccSigOutputState)
    1202:	29 f0       	breq	.+10     	; 0x120e <main+0x546>
    1204:	60 91 84 38 	lds	r22, 0x3884	; 0x803884 <dcc+0x4>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1424
                            notifyDccSigOutputState (OutputAddress, state);
    1208:	c8 01       	movw	r24, r16
    120a:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
    120e:	a0 e0       	ldi	r26, 0x00	; 0
    1210:	b0 e0       	ldi	r27, 0x00	; 0
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1427

                        // old callback ( for compatibility with 1.4.2, not to be used in new designs )
                        if (notifyDccSigState)
    1212:	ab 2b       	or	r26, r27
    1214:	09 f4       	brne	.+2      	; 0x1218 <main+0x550>
    1216:	6e ce       	rjmp	.-804    	; 0xef4 <main+0x22c>
    1218:	40 91 84 38 	lds	r20, 0x3884	; 0x803884 <dcc+0x4>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1428
                            notifyDccSigState (OutputAddress, TurnoutPairIndex, pDccMsg->Data[2]) ;
    121c:	63 2d       	mov	r22, r3
    121e:	c8 01       	movw	r24, r16
    1220:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
    1224:	67 ce       	rjmp	.-818    	; 0xef4 <main+0x22c>
    1226:	be 01       	movw	r22, r28
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1383
                                notifyDccAccOutputAddrSet (OutputAddress);
                        }
                        else
                        {
                            DB_PRINT ("eDP: Set BAddr:%d", BoardAddress);
                            writeCV (CV_ACCESSORY_DECODER_ADDRESS_LSB, (uint8_t) (BoardAddress % 64));
    1228:	6f 73       	andi	r22, 0x3F	; 63
    122a:	77 27       	eor	r23, r23
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	d7 da       	rcall	.-2642   	; 0x7e0 <writeCV(unsigned int, unsigned char)>
    1232:	be 01       	movw	r22, r28
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1384
                            writeCV (CV_ACCESSORY_DECODER_ADDRESS_MSB, (uint8_t) (BoardAddress / 64));
    1234:	46 e0       	ldi	r20, 0x06	; 6
    1236:	75 95       	asr	r23
    1238:	67 95       	ror	r22
    123a:	4a 95       	dec	r20
    123c:	e1 f7       	brne	.-8      	; 0x1236 <main+0x56e>
    123e:	89 e0       	ldi	r24, 0x09	; 9
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	ce da       	rcall	.-2660   	; 0x7e0 <writeCV(unsigned int, unsigned char)>
    1244:	e0 e0       	ldi	r30, 0x00	; 0
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1386

                            if (notifyDccAccBoardAddrSet)
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	ef 2b       	or	r30, r31
    124a:	39 f2       	breq	.-114    	; 0x11da <main+0x512>
    124c:	ce 01       	movw	r24, r28
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1387
                                notifyDccAccBoardAddrSet (BoardAddress);
    124e:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
    1252:	c3 cf       	rjmp	.-122    	; 0x11da <main+0x512>
    1254:	86 ff       	sbrs	r24, 6
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1396
                    }

                    // If we're filtering addresses, does the address match our address or is it a broadcast address? If NOT then return
                    if (DccProcState.Flags & FLAGS_MY_ADDRESS_ONLY)
                    {
                        if (DccProcState.Flags & FLAGS_OUTPUT_ADDRESS_MODE)
    1256:	0b c0       	rjmp	.+22     	; 0x126e <main+0x5a6>
    1258:	33 db       	rcall	.-2458   	; 0x8c0 <getMyAddr()>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1399
                        {
                            DB_PRINT (" AddrChk: OAddr:%d, BAddr:%d, myAddr:%d Chk=%d", OutputAddress, BoardAddress, getMyAddr(), OutputAddress != getMyAddr());
                            if (OutputAddress != getMyAddr()  &&  OutputAddress < 2045)
    125a:	80 17       	cp	r24, r16
    125c:	91 07       	cpc	r25, r17
    125e:	09 f4       	brne	.+2      	; 0x1262 <main+0x59a>
    1260:	c2 cf       	rjmp	.-124    	; 0x11e6 <main+0x51e>
    1262:	0d 3f       	cpi	r16, 0xFD	; 253
    1264:	f7 e0       	ldi	r31, 0x07	; 7
    1266:	1f 07       	cpc	r17, r31
    1268:	0c f0       	brlt	.+2      	; 0x126c <main+0x5a4>
    126a:	bd cf       	rjmp	.-134    	; 0x11e6 <main+0x51e>
    126c:	43 ce       	rjmp	.-890    	; 0xef4 <main+0x22c>
    126e:	28 db       	rcall	.-2480   	; 0x8c0 <getMyAddr()>
    1270:	8c 17       	cp	r24, r28
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1407
                                return;
                            }
                        }
                        else
                        {
                            if ( (BoardAddress != getMyAddr()) && (BoardAddress < 511))
    1272:	9d 07       	cpc	r25, r29
    1274:	09 f4       	brne	.+2      	; 0x1278 <main+0x5b0>
    1276:	b7 cf       	rjmp	.-146    	; 0x11e6 <main+0x51e>
    1278:	cf 3f       	cpi	r28, 0xFF	; 255
    127a:	31 e0       	ldi	r19, 0x01	; 1
    127c:	d3 07       	cpc	r29, r19
    127e:	09 f4       	brne	.+2      	; 0x1282 <main+0x5ba>
    1280:	b2 cf       	rjmp	.-156    	; 0x11e6 <main+0x51e>
    1282:	38 ce       	rjmp	.-912    	; 0xef4 <main+0x22c>
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	69 f5       	brne	.+90     	; 0x12e2 <main+0x61a>
    1288:	40 91 83 38 	lds	r20, 0x3883	; 0x803883 <dcc+0x3>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1431
                        // old callback ( for compatibility with 1.4.2, not to be used in new designs )
                        if (notifyDccSigState)
                            notifyDccSigState (OutputAddress, TurnoutPairIndex, pDccMsg->Data[2]) ;
                    }

                    else if (pDccMsg->Size == 3) // Basic Accessory Decoder Packet Format
    128c:	b4 2f       	mov	r27, r20
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1433
                    {
                        uint8_t direction   =  pDccMsg->Data[1] & 0b00000001;
    128e:	b1 70       	andi	r27, 0x01	; 1
    1290:	eb 2e       	mov	r14, r27
    1292:	43 fb       	bst	r20, 3
    1294:	ff 24       	eor	r15, r15
    1296:	f0 f8       	bld	r15, 0
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1434
                        uint8_t outputPower = (pDccMsg->Data[1] & 0b00001000) >> 3;
    1298:	e0 e0       	ldi	r30, 0x00	; 0
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	ef 2b       	or	r30, r31
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1437

                        // old callback ( for compatibility with 1.4.2, not to be used in new designs )
                        if (notifyDccAccState)
    129e:	31 f0       	breq	.+12     	; 0x12ac <main+0x5e4>
    12a0:	47 70       	andi	r20, 0x07	; 7
    12a2:	2f 2d       	mov	r18, r15
    12a4:	be 01       	movw	r22, r28
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1438
                            notifyDccAccState (OutputAddress, BoardAddress, pDccMsg->Data[1] & 0b00000111, outputPower);
    12a6:	c8 01       	movw	r24, r16
    12a8:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
    12ac:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <DccProcState>
    12b0:	86 ff       	sbrs	r24, 6
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1440

                        if (DccProcState.Flags & FLAGS_OUTPUT_ADDRESS_MODE)
    12b2:	0b c0       	rjmp	.+22     	; 0x12ca <main+0x602>
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	89 2b       	or	r24, r25
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1443
                        {
                            DB_PRINT ("eDP: OAddr:%d  Turnout Dir:%d  Output Power:%d", OutputAddress, direction, outputPower);
                            if (notifyDccAccTurnoutOutput)
    12ba:	09 f4       	brne	.+2      	; 0x12be <main+0x5f6>
    12bc:	1b ce       	rjmp	.-970    	; 0xef4 <main+0x22c>
    12be:	4f 2d       	mov	r20, r15
    12c0:	6e 2d       	mov	r22, r14
    12c2:	c8 01       	movw	r24, r16
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1444
                                notifyDccAccTurnoutOutput (OutputAddress, direction, outputPower);
    12c4:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
    12c8:	15 ce       	rjmp	.-982    	; 0xef4 <main+0x22c>
    12ca:	a0 e0       	ldi	r26, 0x00	; 0
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	ab 2b       	or	r26, r27
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1449
                        }
                        else
                        {
                            DB_PRINT ("eDP: Turnout Pair Index:%d Dir:%d Output Power: ", TurnoutPairIndex, direction, outputPower);
                            if (notifyDccAccTurnoutBoard)
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <main+0x60c>
    12d2:	10 ce       	rjmp	.-992    	; 0xef4 <main+0x22c>
    12d4:	2f 2d       	mov	r18, r15
    12d6:	4e 2d       	mov	r20, r14
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1450
                                notifyDccAccTurnoutBoard (BoardAddress, TurnoutPairIndex, direction, outputPower);
    12d8:	63 2d       	mov	r22, r3
    12da:	ce 01       	movw	r24, r28
    12dc:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
    12e0:	09 ce       	rjmp	.-1006   	; 0xef4 <main+0x22c>
    12e2:	86 30       	cpi	r24, 0x06	; 6
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <main+0x620>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1453
                        }
                    }
                    else if (pDccMsg->Size == 6) // Accessory Decoder OPS Mode Programming
    12e6:	06 ce       	rjmp	.-1012   	; 0xef4 <main+0x22c>
    12e8:	80 91 83 38 	lds	r24, 0x3883	; 0x803883 <dcc+0x3>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1457
                    {
                        DB_PRINT ("eDP: OPS Mode CV Programming Command");
                        // Check for unsupported OPS Mode Addressing mode
                        if ( ( (pDccMsg->Data[1] & 0b10001001) != 1) && ( (pDccMsg->Data[1] & 0b10001111) != 0x80))
    12ec:	98 2f       	mov	r25, r24
    12ee:	99 78       	andi	r25, 0x89	; 137
    12f0:	91 30       	cpi	r25, 0x01	; 1
    12f2:	21 f0       	breq	.+8      	; 0x12fc <main+0x634>
    12f4:	8f 78       	andi	r24, 0x8F	; 143
    12f6:	80 38       	cpi	r24, 0x80	; 128
    12f8:	09 f0       	breq	.+2      	; 0x12fc <main+0x634>
    12fa:	fc cd       	rjmp	.-1032   	; 0xef4 <main+0x22c>
    12fc:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <DccProcState>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1464
                            DB_PRINT ("eDP: Unsupported OPS Mode CV Addressing Mode");
                            return;
                        }

                        // Check if this command is for our address or the broadcast address
                        if (DccProcState.Flags & FLAGS_OUTPUT_ADDRESS_MODE)
    1300:	86 ff       	sbrs	r24, 6
    1302:	23 c0       	rjmp	.+70     	; 0x134a <main+0x682>
    1304:	dd da       	rcall	.-2630   	; 0x8c0 <getMyAddr()>
    1306:	80 17       	cp	r24, r16
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1467
                        {
                            DB_PRINT ("eDP: Check Output Address:%d", OutputAddress);
                            if ( (OutputAddress != getMyAddr()) && (OutputAddress < 2045))
    1308:	91 07       	cpc	r25, r17
    130a:	d9 f4       	brne	.+54     	; 0x1342 <main+0x67a>
    130c:	80 91 84 38 	lds	r24, 0x3884	; 0x803884 <dcc+0x4>
    1310:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1483
                                DB_PRINT ("eDP: Board Address Not Matched");
                                return;
                            }
                        }

                        uint16_t cvAddress = ( (pDccMsg->Data[2] & 0b00000011) << 8) + pDccMsg->Data[3] + 1;
    1312:	d8 2f       	mov	r29, r24
    1314:	cc 27       	eor	r28, r28
    1316:	cc 27       	eor	r28, r28
    1318:	d3 70       	andi	r29, 0x03	; 3
    131a:	20 91 85 38 	lds	r18, 0x3885	; 0x803885 <dcc+0x5>
    131e:	c2 0f       	add	r28, r18
    1320:	d1 1d       	adc	r29, r1
    1322:	21 96       	adiw	r28, 0x01	; 1
    1324:	10 91 86 38 	lds	r17, 0x3886	; 0x803886 <dcc+0x6>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1484
                        uint8_t  cvValue   = pDccMsg->Data[4];
    1328:	95 95       	asr	r25
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1486

                        OpsInstructionType insType = (OpsInstructionType) ( (pDccMsg->Data[2] & 0b00001100) >> 2) ;
    132a:	87 95       	ror	r24
    132c:	95 95       	asr	r25
    132e:	87 95       	ror	r24
    1330:	83 70       	andi	r24, 0x03	; 3
    1332:	99 27       	eor	r25, r25
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1489

                        DB_PRINT ("eDP: OPS Mode Instruction:%d", insType);
                        switch (insType)
    1334:	82 30       	cpi	r24, 0x02	; 2
    1336:	91 05       	cpc	r25, r1
    1338:	81 f0       	breq	.+32     	; 0x135a <main+0x692>
    133a:	03 97       	sbiw	r24, 0x03	; 3
    133c:	09 f4       	brne	.+2      	; 0x1340 <main+0x678>
    133e:	1b cf       	rjmp	.-458    	; 0x1176 <main+0x4ae>
    1340:	d9 cd       	rjmp	.-1102   	; 0xef4 <main+0x22c>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1467

                        // Check if this command is for our address or the broadcast address
                        if (DccProcState.Flags & FLAGS_OUTPUT_ADDRESS_MODE)
                        {
                            DB_PRINT ("eDP: Check Output Address:%d", OutputAddress);
                            if ( (OutputAddress != getMyAddr()) && (OutputAddress < 2045))
    1342:	0d 3f       	cpi	r16, 0xFD	; 253
    1344:	17 40       	sbci	r17, 0x07	; 7
    1346:	14 f7       	brge	.-60     	; 0x130c <main+0x644>
    1348:	d5 cd       	rjmp	.-1110   	; 0xef4 <main+0x22c>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1476
                            }
                        }
                        else
                        {
                            DB_PRINT ("eDP: Check Board Address:%d", BoardAddress);
                            if ( (BoardAddress != getMyAddr()) && (BoardAddress < 511))
    134a:	ba da       	rcall	.-2700   	; 0x8c0 <getMyAddr()>
    134c:	8c 17       	cp	r24, r28
    134e:	9d 07       	cpc	r25, r29
    1350:	e9 f2       	breq	.-70     	; 0x130c <main+0x644>
    1352:	cf 3f       	cpi	r28, 0xFF	; 255
    1354:	d1 40       	sbci	r29, 0x01	; 1
    1356:	d1 f2       	breq	.-76     	; 0x130c <main+0x644>
    1358:	cd cd       	rjmp	.-1126   	; 0xef4 <main+0x22c>
    135a:	14 ff       	sbrs	r17, 4
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1510
                        // and C describes whether the operation is a verify bit or a write bit operation.
                        // C = "1" WRITE BIT
                        // C = "0" VERIFY BIT
                        case OPS_INS_BIT_MANIPULATION:
                            // Make sure its a Write Bit Manipulation
                            if ( (cvValue & 0b00010000) && validCV (cvAddress, 1))
    135c:	cb cd       	rjmp	.-1130   	; 0xef4 <main+0x22c>
    135e:	61 e0       	ldi	r22, 0x01	; 1
    1360:	ce 01       	movw	r24, r28
    1362:	f7 da       	rcall	.-2578   	; 0x952 <validCV(unsigned int, unsigned char)>
    1364:	88 23       	and	r24, r24
    1366:	09 f4       	brne	.+2      	; 0x136a <main+0x6a2>
    1368:	c5 cd       	rjmp	.-1142   	; 0xef4 <main+0x22c>
    136a:	ce 01       	movw	r24, r28
    136c:	9e da       	rcall	.-2756   	; 0x8aa <readCV(unsigned int)>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1512
                            {
                                uint8_t currentValue = readCV (cvAddress);
    136e:	91 2f       	mov	r25, r17
    1370:	97 70       	andi	r25, 0x07	; 7
    1372:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1513
                                uint8_t newValueMask = 1 << (cvValue & 0b00000111);
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	01 c0       	rjmp	.+2      	; 0x137a <main+0x6b2>
    1378:	66 0f       	add	r22, r22
    137a:	9a 95       	dec	r25
    137c:	ea f7       	brpl	.-6      	; 0x1378 <main+0x6b0>
    137e:	13 ff       	sbrs	r17, 3
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <main+0x6be>
    1382:	68 2b       	or	r22, r24
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1514
                                if (cvValue & 0b00001000)
    1384:	ff ce       	rjmp	.-514    	; 0x1184 <main+0x4bc>
    1386:	60 95       	com	r22
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1515
                                    writeCV (cvAddress, currentValue | newValueMask);
    1388:	68 23       	and	r22, r24
    138a:	fc ce       	rjmp	.-520    	; 0x1184 <main+0x4bc>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1517
                                else
                                    writeCV (cvAddress, currentValue & ~newValueMask);
    138c:	e8 3e       	cpi	r30, 0xE8	; 232
    138e:	08 f0       	brcs	.+2      	; 0x1392 <main+0x6ca>
    1390:	b1 cd       	rjmp	.-1182   	; 0xef4 <main+0x22c>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1527
                }
            }

            #ifdef NMRA_DCC_PROCESS_MULTIFUNCTION
            // Multi Function Decoders (14-bit address)
            else if (pDccMsg->Data[0] < 232)
    1392:	e0 5c       	subi	r30, 0xC0	; 192
    1394:	ff 0b       	sbc	r31, r31
    1396:	80 91 83 38 	lds	r24, 0x3883	; 0x803883 <dcc+0x3>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1530
            {
                uint16_t Address ;
                Address = ( (pDccMsg->Data[0] - 192) << 8) | pDccMsg->Data[1];
    139a:	00 91 86 38 	lds	r16, 0x3886	; 0x803886 <dcc+0x6>
    139e:	20 91 85 38 	lds	r18, 0x3885	; 0x803885 <dcc+0x5>
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/NmraDcc.cpp:1532
                //TODO should we convert Address to 1 .. 10239 ?
                processMultiFunctionMessage (Address, DCC_ADDR_LONG, pDccMsg->Data[2], pDccMsg->Data[3], pDccMsg->Data[4]) ;
    13a2:	40 91 84 38 	lds	r20, 0x3884	; 0x803884 <dcc+0x4>
    13a6:	61 e0       	ldi	r22, 0x01	; 1
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	9e 2f       	mov	r25, r30
    13ac:	aa ce       	rjmp	.-684    	; 0x1102 <main+0x43a>

000013ae <_GLOBAL__sub_I_dcc>:
_GLOBAL__sub_I_dcc():
    13ae:	ef e6       	ldi	r30, 0x6F	; 111
    13b0:	f8 e3       	ldi	r31, 0x38	; 56
    13b2:	12 86       	std	Z+10, r1	; 0x0a
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:4
#include "weistra.h"


Weistra::Weistra(uint8_t _pin, uint8_t _Fmin, uint8_t _Fmax ) 
    13b4:	13 86       	std	Z+11, r1	; 0x0b
    13b6:	14 86       	std	Z+12, r1	; 0x0c
    13b8:	15 86       	std	Z+13, r1	; 0x0d
    13ba:	16 86       	std	Z+14, r1	; 0x0e
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	84 83       	std	Z+4, r24	; 0x04
    13c0:	82 e3       	ldi	r24, 0x32	; 50
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:6
{ // constructor
    trackPin = _pin;
    13c2:	87 83       	std	Z+7, r24	; 0x07
    13c4:	84 e6       	ldi	r24, 0x64	; 100
C:\Users\GEBRUI~1\AppData\Local\Temp\arduino-sketch-A3EF24301ADE5274F618D60ADD78D775\sketch\src/weistra.cpp:7
    Fmin = _Fmin ;
    13c6:	80 87       	std	Z+8, r24	; 0x08
    13c8:	08 95       	ret

000013ca <__divmodhi4>:
__divmodhi4():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    13ca:	97 fb       	bst	r25, 7
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    13cc:	07 2e       	mov	r0, r23
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    13ce:	16 f4       	brtc	.+4      	; 0x13d4 <__divmodhi4+0xa>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    13d0:	00 94       	com	r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    13d2:	06 d0       	rcall	.+12     	; 0x13e0 <__divmodhi4_neg1>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    13d4:	77 fd       	sbrc	r23, 7
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    13d6:	08 d0       	rcall	.+16     	; 0x13e8 <__divmodhi4_neg2>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    13d8:	15 d0       	rcall	.+42     	; 0x1404 <__udivmodhi4>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    13da:	07 fc       	sbrc	r0, 7
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    13dc:	05 d0       	rcall	.+10     	; 0x13e8 <__divmodhi4_neg2>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    13de:	3e f4       	brtc	.+14     	; 0x13ee <__divmodhi4_exit>

000013e0 <__divmodhi4_neg1>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    13e0:	90 95       	com	r25
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    13e2:	81 95       	neg	r24
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    13e4:	9f 4f       	sbci	r25, 0xFF	; 255
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    13e6:	08 95       	ret

000013e8 <__divmodhi4_neg2>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    13e8:	70 95       	com	r23
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    13ea:	61 95       	neg	r22
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    13ec:	7f 4f       	sbci	r23, 0xFF	; 255

000013ee <__divmodhi4_exit>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    13ee:	08 95       	ret

000013f0 <__muluhisi3>:
__muluhisi3():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    13f0:	23 d0       	rcall	.+70     	; 0x1438 <__umulhisi3>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    13f2:	a5 9f       	mul	r26, r21
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    13f4:	90 0d       	add	r25, r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    13f6:	b4 9f       	mul	r27, r20
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    13f8:	90 0d       	add	r25, r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    13fa:	a4 9f       	mul	r26, r20
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    13fc:	80 0d       	add	r24, r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    13fe:	91 1d       	adc	r25, r1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    1400:	11 24       	eor	r1, r1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    1402:	08 95       	ret

00001404 <__udivmodhi4>:
__udivmodhi4():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    1404:	aa 1b       	sub	r26, r26
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    1406:	bb 1b       	sub	r27, r27
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    1408:	51 e1       	ldi	r21, 0x11	; 17
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    140a:	07 c0       	rjmp	.+14     	; 0x141a <__udivmodhi4_ep>

0000140c <__udivmodhi4_loop>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    140c:	aa 1f       	adc	r26, r26
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    140e:	bb 1f       	adc	r27, r27
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    1410:	a6 17       	cp	r26, r22
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    1412:	b7 07       	cpc	r27, r23
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    1414:	10 f0       	brcs	.+4      	; 0x141a <__udivmodhi4_ep>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    1416:	a6 1b       	sub	r26, r22
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    1418:	b7 0b       	sbc	r27, r23

0000141a <__udivmodhi4_ep>:
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    141a:	88 1f       	adc	r24, r24
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    141c:	99 1f       	adc	r25, r25
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    141e:	5a 95       	dec	r21
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    1420:	a9 f7       	brne	.-22     	; 0x140c <__udivmodhi4_loop>
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    1422:	80 95       	com	r24
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    1424:	90 95       	com	r25
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    1426:	bc 01       	movw	r22, r24
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    1428:	cd 01       	movw	r24, r26
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    142a:	08 95       	ret

0000142c <__tablejump2__>:
__tablejump2__():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    142c:	ee 0f       	add	r30, r30
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    142e:	ff 1f       	adc	r31, r31
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1430:	05 90       	lpm	r0, Z+
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1432:	f4 91       	lpm	r31, Z
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1434:	e0 2d       	mov	r30, r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1436:	09 94       	ijmp

00001438 <__umulhisi3>:
__umulhisi3():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    1438:	a2 9f       	mul	r26, r18
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    143a:	b0 01       	movw	r22, r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    143c:	b3 9f       	mul	r27, r19
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    143e:	c0 01       	movw	r24, r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    1440:	a3 9f       	mul	r26, r19
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    1442:	70 0d       	add	r23, r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    1444:	81 1d       	adc	r24, r1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    1446:	11 24       	eor	r1, r1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    1448:	91 1d       	adc	r25, r1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    144a:	b2 9f       	mul	r27, r18
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    144c:	70 0d       	add	r23, r0
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    144e:	81 1d       	adc	r24, r1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    1450:	11 24       	eor	r1, r1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    1452:	91 1d       	adc	r25, r1
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    1454:	08 95       	ret

00001456 <memcmp>:
memcmp():
    1456:	fb 01       	movw	r30, r22
    1458:	dc 01       	movw	r26, r24
    145a:	04 c0       	rjmp	.+8      	; 0x1464 <memcmp+0xe>
    145c:	8d 91       	ld	r24, X+
    145e:	01 90       	ld	r0, Z+
    1460:	80 19       	sub	r24, r0
    1462:	21 f4       	brne	.+8      	; 0x146c <memcmp+0x16>
    1464:	41 50       	subi	r20, 0x01	; 1
    1466:	50 40       	sbci	r21, 0x00	; 0
    1468:	c8 f7       	brcc	.-14     	; 0x145c <memcmp+0x6>
    146a:	88 1b       	sub	r24, r24
    146c:	99 0b       	sbc	r25, r25
    146e:	08 95       	ret

00001470 <_exit>:
exit():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1470:	f8 94       	cli

00001472 <__stop_program>:
__stop_program():
/home/admin/Arduino/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1472:	ff cf       	rjmp	.-2      	; 0x1472 <__stop_program>
